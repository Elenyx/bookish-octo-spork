{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        orbitron: [\"Orbitron\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2801},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { gameEngine } from \"./services/gameEngine\";\nimport { combatSystem } from \"./services/combatSystem\";\nimport { explorationSystem } from \"./services/explorationSystem\";\nimport { economySystem } from \"./services/economySystem\";\nimport { guildSystem } from \"./services/guildSystem\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // User routes\n  app.get(\"/api/user/:discordId\", async (req, res) => {\n    try {\n      const user = await storage.getUserByDiscordId(req.params.discordId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.post(\"/api/user/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await gameEngine.registerUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  // Ship routes\n  app.get(\"/api/user/:userId/ships\", async (req, res) => {\n    try {\n      const ships = await storage.getUserShips(req.params.userId);\n      res.json(ships);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get ships\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/ship/activate\", async (req, res) => {\n    try {\n      const { shipId } = req.body;\n      await storage.setActiveShip(req.params.userId, shipId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to activate ship\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/ship/upgrade\", async (req, res) => {\n    try {\n      const { shipId } = req.body;\n      const result = await gameEngine.upgradeShip(req.params.userId, shipId);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to upgrade ship\" });\n    }\n  });\n\n  // Exploration routes\n  app.post(\"/api/user/:userId/explore\", async (req, res) => {\n    try {\n      const { type, sector } = req.body;\n      const result = await explorationSystem.explore(req.params.userId, type, sector);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Exploration failed\" });\n    }\n  });\n\n  app.get(\"/api/user/:userId/explorations\", async (req, res) => {\n    try {\n      const explorations = await storage.getUserExplorations(req.params.userId);\n      res.json(explorations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get exploration history\" });\n    }\n  });\n\n  // Combat routes\n  app.post(\"/api/user/:userId/combat/pve\", async (req, res) => {\n    try {\n      const { enemyType } = req.body;\n      const result = await combatSystem.pveCompat(req.params.userId, enemyType);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Combat failed\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/combat/pvp\", async (req, res) => {\n    try {\n      const { targetUserId } = req.body;\n      const result = await combatSystem.pvpCombat(req.params.userId, targetUserId);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"PvP combat failed\" });\n    }\n  });\n\n  // Market routes\n  app.get(\"/api/market/items\", async (req, res) => {\n    try {\n      const items = await economySystem.getMarketItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get market items\" });\n    }\n  });\n\n  app.post(\"/api/market/buy\", async (req, res) => {\n    try {\n      const { userId, itemName, quantity } = req.body;\n      const result = await economySystem.buyItem(userId, itemName, quantity);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Purchase failed\" });\n    }\n  });\n\n  app.post(\"/api/market/sell\", async (req, res) => {\n    try {\n      const { userId, resourceId, quantity, pricePerUnit } = req.body;\n      const result = await economySystem.sellResource(userId, resourceId, quantity, pricePerUnit);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Sale failed\" });\n    }\n  });\n\n  // Guild routes\n  app.get(\"/api/guilds\", async (req, res) => {\n    try {\n      const guilds = await storage.getAllGuilds();\n      res.json(guilds);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get guilds\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/guild/join\", async (req, res) => {\n    try {\n      const { guildId } = req.body;\n      const result = await guildSystem.joinGuild(req.params.userId, guildId);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to join guild\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/guild/contribute\", async (req, res) => {\n    try {\n      const { resourceType, amount } = req.body;\n      const result = await guildSystem.contribute(req.params.userId, resourceType, amount);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to contribute to guild\" });\n    }\n  });\n\n  // Alliance routes\n  app.get(\"/api/alliances\", async (req, res) => {\n    try {\n      const alliances = await storage.getUserAlliances();\n      res.json(alliances);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get alliances\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/alliance/create\", async (req, res) => {\n    try {\n      const { name, description } = req.body;\n      const alliance = await storage.createAlliance({\n        name,\n        description,\n        leaderId: req.params.userId\n      });\n      res.json(alliance);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create alliance\" });\n    }\n  });\n\n  // Crafting routes\n  app.get(\"/api/recipes\", async (req, res) => {\n    try {\n      const recipes = await storage.getAllRecipes();\n      res.json(recipes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get recipes\" });\n    }\n  });\n\n  app.post(\"/api/user/:userId/craft\", async (req, res) => {\n    try {\n      const { recipeId } = req.body;\n      const result = await economySystem.craftItem(req.params.userId, recipeId);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Crafting failed\" });\n    }\n  });\n\n  // Resources routes\n  app.get(\"/api/user/:userId/resources\", async (req, res) => {\n    try {\n      const resources = await storage.getUserResources(req.params.userId);\n      res.json(resources);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get resources\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6857},"server/storage.ts":{"content":"import { \n  users, ships, resources, guilds, alliances, explorations, \n  combatLogs, marketTransactions, recipes,\n  type User, type InsertUser, type Ship, type InsertShip,\n  type Resource, type InsertResource, type Guild, type InsertGuild,\n  type Alliance, type InsertAlliance, type Exploration, type InsertExploration,\n  type CombatLog, type InsertCombatLog, type MarketTransaction, \n  type InsertMarketTransaction, type Recipe, type InsertRecipe\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByDiscordId(discordId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Ship operations\n  getShip(id: string): Promise<Ship | undefined>;\n  getUserShips(userId: string): Promise<Ship[]>;\n  createShip(ship: InsertShip): Promise<Ship>;\n  updateShip(id: string, updates: Partial<Ship>): Promise<Ship>;\n  setActiveShip(userId: string, shipId: string): Promise<void>;\n\n  // Resource operations\n  getUserResources(userId: string): Promise<Resource[]>;\n  addResource(resource: InsertResource): Promise<Resource>;\n  updateResource(id: string, updates: Partial<Resource>): Promise<Resource>;\n  removeResource(id: string): Promise<void>;\n\n  // Guild operations\n  getGuild(id: string): Promise<Guild | undefined>;\n  getAllGuilds(): Promise<Guild[]>;\n  createGuild(guild: InsertGuild): Promise<Guild>;\n  updateGuild(id: string, updates: Partial<Guild>): Promise<Guild>;\n  getGuildMembers(guildId: string): Promise<User[]>;\n\n  // Alliance operations\n  getAlliance(id: string): Promise<Alliance | undefined>;\n  getUserAlliances(): Promise<Alliance[]>;\n  createAlliance(alliance: InsertAlliance): Promise<Alliance>;\n  updateAlliance(id: string, updates: Partial<Alliance>): Promise<Alliance>;\n  getAllianceMembers(allianceId: string): Promise<User[]>;\n\n  // Exploration operations\n  addExploration(exploration: InsertExploration): Promise<Exploration>;\n  getUserExplorations(userId: string, limit?: number): Promise<Exploration[]>;\n\n  // Combat operations\n  addCombatLog(combat: InsertCombatLog): Promise<CombatLog>;\n  getUserCombatHistory(userId: string, limit?: number): Promise<CombatLog[]>;\n\n  // Market operations\n  addMarketTransaction(transaction: InsertMarketTransaction): Promise<MarketTransaction>;\n  getMarketHistory(limit?: number): Promise<MarketTransaction[]>;\n\n  // Recipe operations\n  getAllRecipes(): Promise<Recipe[]>;\n  getRecipesByType(type: string): Promise<Recipe[]>;\n  createRecipe(recipe: InsertRecipe): Promise<Recipe>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByDiscordId(discordId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.discordId, discordId));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getShip(id: string): Promise<Ship | undefined> {\n    const [ship] = await db.select().from(ships).where(eq(ships.id, id));\n    return ship || undefined;\n  }\n\n  async getUserShips(userId: string): Promise<Ship[]> {\n    return await db.select().from(ships).where(eq(ships.userId, userId));\n  }\n\n  async createShip(ship: InsertShip): Promise<Ship> {\n    const [newShip] = await db.insert(ships).values(ship).returning();\n    return newShip;\n  }\n\n  async updateShip(id: string, updates: Partial<Ship>): Promise<Ship> {\n    const [ship] = await db.update(ships).set(updates).where(eq(ships.id, id)).returning();\n    return ship;\n  }\n\n  async setActiveShip(userId: string, shipId: string): Promise<void> {\n    // First deactivate all ships for the user\n    await db.update(ships).set({ isActive: false }).where(eq(ships.userId, userId));\n    // Then activate the selected ship\n    await db.update(ships).set({ isActive: true }).where(eq(ships.id, shipId));\n    // Update user's active ship reference\n    await db.update(users).set({ activeShipId: shipId }).where(eq(users.id, userId));\n  }\n\n  async getUserResources(userId: string): Promise<Resource[]> {\n    return await db.select().from(resources).where(eq(resources.userId, userId));\n  }\n\n  async addResource(resource: InsertResource): Promise<Resource> {\n    const [newResource] = await db.insert(resources).values(resource).returning();\n    return newResource;\n  }\n\n  async updateResource(id: string, updates: Partial<Resource>): Promise<Resource> {\n    const [resource] = await db.update(resources).set(updates).where(eq(resources.id, id)).returning();\n    return resource;\n  }\n\n  async removeResource(id: string): Promise<void> {\n    await db.delete(resources).where(eq(resources.id, id));\n  }\n\n  async getGuild(id: string): Promise<Guild | undefined> {\n    const [guild] = await db.select().from(guilds).where(eq(guilds.id, id));\n    return guild || undefined;\n  }\n\n  async getAllGuilds(): Promise<Guild[]> {\n    return await db.select().from(guilds);\n  }\n\n  async createGuild(guild: InsertGuild): Promise<Guild> {\n    const [newGuild] = await db.insert(guilds).values(guild).returning();\n    return newGuild;\n  }\n\n  async updateGuild(id: string, updates: Partial<Guild>): Promise<Guild> {\n    const [guild] = await db.update(guilds).set(updates).where(eq(guilds.id, id)).returning();\n    return guild;\n  }\n\n  async getGuildMembers(guildId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.guildId, guildId));\n  }\n\n  async getAlliance(id: string): Promise<Alliance | undefined> {\n    const [alliance] = await db.select().from(alliances).where(eq(alliances.id, id));\n    return alliance || undefined;\n  }\n\n  async getUserAlliances(): Promise<Alliance[]> {\n    return await db.select().from(alliances);\n  }\n\n  async createAlliance(alliance: InsertAlliance): Promise<Alliance> {\n    const [newAlliance] = await db.insert(alliances).values(alliance).returning();\n    return newAlliance;\n  }\n\n  async updateAlliance(id: string, updates: Partial<Alliance>): Promise<Alliance> {\n    const [alliance] = await db.update(alliances).set(updates).where(eq(alliances.id, id)).returning();\n    return alliance;\n  }\n\n  async getAllianceMembers(allianceId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.allianceId, allianceId));\n  }\n\n  async addExploration(exploration: InsertExploration): Promise<Exploration> {\n    const [newExploration] = await db.insert(explorations).values([exploration]).returning();\n    return newExploration;\n  }\n\n  async getUserExplorations(userId: string, limit = 10): Promise<Exploration[]> {\n    return await db.select().from(explorations)\n      .where(eq(explorations.userId, userId))\n      .orderBy(desc(explorations.timestamp))\n      .limit(limit);\n  }\n\n  async addCombatLog(combat: InsertCombatLog): Promise<CombatLog> {\n    const [newCombat] = await db.insert(combatLogs).values([combat]).returning();\n    return newCombat;\n  }\n\n  async getUserCombatHistory(userId: string, limit = 10): Promise<CombatLog[]> {\n    return await db.select().from(combatLogs)\n      .where(eq(combatLogs.attackerId, userId))\n      .orderBy(desc(combatLogs.timestamp))\n      .limit(limit);\n  }\n\n  async addMarketTransaction(transaction: InsertMarketTransaction): Promise<MarketTransaction> {\n    const [newTransaction] = await db.insert(marketTransactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getMarketHistory(limit = 50): Promise<MarketTransaction[]> {\n    return await db.select().from(marketTransactions)\n      .orderBy(desc(marketTransactions.timestamp))\n      .limit(limit);\n  }\n\n  async getAllRecipes(): Promise<Recipe[]> {\n    return await db.select().from(recipes);\n  }\n\n  async getRecipesByType(type: string): Promise<Recipe[]> {\n    return await db.select().from(recipes).where(eq(recipes.type, type));\n  }\n\n  async createRecipe(recipe: InsertRecipe): Promise<Recipe> {\n    const [newRecipe] = await db.insert(recipes).values([recipe]).returning();\n    return newRecipe;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8547},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  integer, \n  boolean, \n  timestamp, \n  json,\n  serial,\n  real\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  discordId: varchar(\"discord_id\").notNull().unique(),\n  username: text(\"username\").notNull(),\n  level: integer(\"level\").default(1),\n  experience: integer(\"experience\").default(0),\n  credits: integer(\"credits\").default(1000),\n  nexium: integer(\"nexium\").default(25),\n  activeShipId: varchar(\"active_ship_id\"),\n  guildId: varchar(\"guild_id\"),\n  allianceId: varchar(\"alliance_id\"),\n  stats: json(\"stats\").$type<{\n    exploration: number;\n    combat: number;\n    artifacts: number;\n    trades: number;\n  }>().default({ exploration: 0, combat: 0, artifacts: 0, trades: 0 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastActive: timestamp(\"last_active\").defaultNow()\n});\n\n// Ships table\nexport const ships = pgTable(\"ships\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // scout, fighter, freighter, explorer, battlecruiser, flagship\n  tier: integer(\"tier\").notNull(), // 1-4\n  variant: text(\"variant\").notNull(), // Swiftwing, Spectre, etc.\n  health: integer(\"health\").notNull(),\n  maxHealth: integer(\"max_health\").notNull(),\n  speed: integer(\"speed\").notNull(),\n  cargo: integer(\"cargo\").notNull(),\n  weapons: integer(\"weapons\").notNull(),\n  sensors: integer(\"sensors\").notNull(),\n  isActive: boolean(\"is_active\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Resources table\nexport const resources = pgTable(\"resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // material, artifact, component\n  quantity: integer(\"quantity\").default(1),\n  rarity: text(\"rarity\").notNull(), // common, uncommon, rare, epic, legendary\n  description: text(\"description\"),\n  value: integer(\"value\").default(0)\n});\n\n// Guilds table\nexport const guilds = pgTable(\"guilds\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // military, exploration, trade, research\n  level: integer(\"level\").default(1),\n  experience: integer(\"experience\").default(0),\n  memberCount: integer(\"member_count\").default(0),\n  maxMembers: integer(\"max_members\").default(100),\n  leaderId: varchar(\"leader_id\"), // NPC leader\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Alliances table\nexport const alliances = pgTable(\"alliances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  leaderId: varchar(\"leader_id\").notNull().references(() => users.id),\n  memberCount: integer(\"member_count\").default(1),\n  maxMembers: integer(\"max_members\").default(20),\n  fleetPower: integer(\"fleet_power\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Exploration data\nexport const explorations = pgTable(\"explorations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  sector: text(\"sector\").notNull(),\n  type: text(\"type\").notNull(), // exploration, hunting, fishing, artifact_search\n  result: json(\"result\").$type<{\n    success: boolean;\n    rewards: Array<{ type: string; name: string; quantity: number; value: number }>;\n    experience: number;\n  }>(),\n  timestamp: timestamp(\"timestamp\").defaultNow()\n});\n\n// Combat logs\nexport const combatLogs = pgTable(\"combat_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  attackerId: varchar(\"attacker_id\").notNull().references(() => users.id),\n  defenderId: varchar(\"defender_id\"), // null for PvE\n  type: text(\"type\").notNull(), // pve, pvp\n  result: json(\"result\").$type<{\n    winner: string;\n    attackerDamage: number;\n    defenderDamage: number;\n    rewards: Array<{ type: string; name: string; quantity: number; value: number }>;\n    experience: number;\n  }>(),\n  timestamp: timestamp(\"timestamp\").defaultNow()\n});\n\n// Market transactions\nexport const marketTransactions = pgTable(\"market_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sellerId: varchar(\"seller_id\"), // null for NPC transactions\n  buyerId: varchar(\"buyer_id\").notNull().references(() => users.id),\n  itemType: text(\"item_type\").notNull(),\n  itemName: text(\"item_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  pricePerUnit: integer(\"price_per_unit\").notNull(),\n  totalPrice: integer(\"total_price\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow()\n});\n\n// Crafting recipes\nexport const recipes = pgTable(\"recipes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // weapon, component, upgrade\n  materials: json(\"materials\").$type<Array<{ name: string; quantity: number }>>(),\n  result: json(\"result\").$type<{ name: string; quantity: number; stats?: any }>(),\n  level: integer(\"level\").default(1),\n  rarity: text(\"rarity\").notNull()\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  ships: many(ships),\n  resources: many(resources),\n  guild: one(guilds, { fields: [users.guildId], references: [guilds.id] }),\n  alliance: one(alliances, { fields: [users.allianceId], references: [alliances.id] }),\n  explorations: many(explorations),\n  combatLogs: many(combatLogs, { relationName: \"attacker\" }),\n  marketTransactions: many(marketTransactions)\n}));\n\nexport const shipsRelations = relations(ships, ({ one }) => ({\n  user: one(users, { fields: [ships.userId], references: [users.id] })\n}));\n\nexport const resourcesRelations = relations(resources, ({ one }) => ({\n  user: one(users, { fields: [resources.userId], references: [users.id] })\n}));\n\nexport const guildsRelations = relations(guilds, ({ many }) => ({\n  members: many(users)\n}));\n\nexport const alliancesRelations = relations(alliances, ({ one, many }) => ({\n  leader: one(users, { fields: [alliances.leaderId], references: [users.id] }),\n  members: many(users)\n}));\n\nexport const explorationsRelations = relations(explorations, ({ one }) => ({\n  user: one(users, { fields: [explorations.userId], references: [users.id] })\n}));\n\nexport const combatLogsRelations = relations(combatLogs, ({ one }) => ({\n  attacker: one(users, { fields: [combatLogs.attackerId], references: [users.id], relationName: \"attacker\" })\n}));\n\nexport const marketTransactionsRelations = relations(marketTransactions, ({ one }) => ({\n  buyer: one(users, { fields: [marketTransactions.buyerId], references: [users.id] })\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastActive: true\n});\n\nexport const insertShipSchema = createInsertSchema(ships).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).omit({\n  id: true\n});\n\nexport const insertGuildSchema = createInsertSchema(guilds).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertAllianceSchema = createInsertSchema(alliances).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertExplorationSchema = createInsertSchema(explorations).omit({\n  id: true,\n  timestamp: true\n});\n\nexport const insertCombatLogSchema = createInsertSchema(combatLogs).omit({\n  id: true,\n  timestamp: true\n});\n\nexport const insertMarketTransactionSchema = createInsertSchema(marketTransactions).omit({\n  id: true,\n  timestamp: true\n});\n\nexport const insertRecipeSchema = createInsertSchema(recipes).omit({\n  id: true\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Ship = typeof ships.$inferSelect;\nexport type InsertShip = z.infer<typeof insertShipSchema>;\nexport type Resource = typeof resources.$inferSelect;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Guild = typeof guilds.$inferSelect;\nexport type InsertGuild = z.infer<typeof insertGuildSchema>;\nexport type Alliance = typeof alliances.$inferSelect;\nexport type InsertAlliance = z.infer<typeof insertAllianceSchema>;\nexport type Exploration = typeof explorations.$inferSelect;\nexport type InsertExploration = z.infer<typeof insertExplorationSchema>;\nexport type CombatLog = typeof combatLogs.$inferSelect;\nexport type InsertCombatLog = z.infer<typeof insertCombatLogSchema>;\nexport type MarketTransaction = typeof marketTransactions.$inferSelect;\nexport type InsertMarketTransaction = z.infer<typeof insertMarketTransactionSchema>;\nexport type Recipe = typeof recipes.$inferSelect;\nexport type InsertRecipe = z.infer<typeof insertRecipeSchema>;\n","size_bytes":9154},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Fleet from \"@/pages/Fleet\";\nimport Explore from \"@/pages/Explore\";\nimport Guild from \"@/pages/Guild\";\nimport Market from \"@/pages/Market\";\nimport Navigation from \"@/components/Navigation\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground space-pattern\">\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/fleet\" component={Fleet} />\n        <Route path=\"/explore\" component={Explore} />\n        <Route path=\"/guild\" component={Guild} />\n        <Route path=\"/market\" component={Market} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1235},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240 10% 4%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(240 10% 6%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(240 10% 6%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(195 100% 50%);\n  --primary-foreground: hsl(240 10% 4%);\n  --secondary: hsl(262 83% 58%);\n  --secondary-foreground: hsl(0 0% 95%);\n  --muted: hsl(240 5% 15%);\n  --muted-foreground: hsl(240 5% 65%);\n  --accent: hsl(43 96% 56%);\n  --accent-foreground: hsl(240 10% 4%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 6% 20%);\n  --input: hsl(240 6% 20%);\n  --ring: hsl(195 100% 50%);\n  --chart-1: hsl(195 100% 50%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(43 96% 56%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(240 10% 6%);\n  --sidebar-foreground: hsl(0 0% 95%);\n  --sidebar-primary: hsl(195 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(240 5% 15%);\n  --sidebar-accent-foreground: hsl(195 100% 50%);\n  --sidebar-border: hsl(240 6% 20%);\n  --sidebar-ring: hsl(195 100% 50%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: \"Inter\", serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(240 10% 4%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(240 10% 6%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(240 10% 6%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(195 100% 50%);\n  --primary-foreground: hsl(240 10% 4%);\n  --secondary: hsl(262 83% 58%);\n  --secondary-foreground: hsl(0 0% 95%);\n  --muted: hsl(240 5% 15%);\n  --muted-foreground: hsl(240 5% 65%);\n  --accent: hsl(43 96% 56%);\n  --accent-foreground: hsl(240 10% 4%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 6% 20%);\n  --input: hsl(240 6% 20%);\n  --ring: hsl(195 100% 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.font-orbitron {\n  font-family: \"Orbitron\", sans-serif;\n}\n\n.glow-border {\n  box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);\n}\n\n.glow-text {\n  text-shadow: 0 0 10px currentColor;\n}\n\n.space-pattern {\n  background-image: radial-gradient(circle at 25% 25%, rgba(0, 212, 255, 0.1) 0%, transparent 50%),\n                    radial-gradient(circle at 75% 75%, rgba(139, 92, 246, 0.1) 0%, transparent 50%);\n}\n\n.ship-card:hover {\n  transform: translateY(-5px);\n  transition: all 0.3s ease;\n}\n\n.stat-bar {\n  background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);\n}\n","size_bytes":2851},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/discord/bot.ts":{"content":"import { Client, GatewayIntentBits, Collection } from 'discord.js';\nimport { commands } from './commands';\nimport { handleInteraction } from './handlers';\n\nclass DiscordBot {\n  public client: Client;\n  public commands: Collection<string, any>;\n\n  constructor() {\n    this.client = new Client({\n      intents: [\n        GatewayIntentBits.Guilds,\n        GatewayIntentBits.GuildMessages,\n        GatewayIntentBits.MessageContent\n      ]\n    });\n    \n    this.commands = new Collection();\n    this.setupCommands();\n    this.setupEventHandlers();\n  }\n\n  private setupCommands() {\n    commands.forEach(command => {\n      this.commands.set(command.data.name, command);\n    });\n  }\n\n  private setupEventHandlers() {\n    this.client.once('ready', () => {\n      console.log(`Stellar Nexus bot is online! Logged in as ${this.client.user?.tag}`);\n    });\n\n    this.client.on('interactionCreate', async (interaction) => {\n      await handleInteraction(interaction, this.commands);\n    });\n  }\n\n  public async start() {\n    const token = process.env.DISCORD_TOKEN;\n    if (!token) {\n      throw new Error('DISCORD_TOKEN environment variable is required');\n    }\n\n    try {\n      await this.client.login(token);\n    } catch (error) {\n      console.error('Failed to start Discord bot:', error);\n      throw error;\n    }\n  }\n\n  public async deployCommands() {\n    const { REST, Routes } = await import('discord.js');\n    const rest = new REST().setToken(process.env.DISCORD_TOKEN!);\n\n    try {\n      console.log('Started refreshing application (/) commands.');\n\n      const commandData = commands.map(command => command.data.toJSON());\n\n      await rest.put(\n        Routes.applicationCommands(process.env.DISCORD_CLIENT_ID!),\n        { body: commandData }\n      );\n\n      console.log('Successfully reloaded application (/) commands.');\n    } catch (error) {\n      console.error('Error deploying commands:', error);\n    }\n  }\n}\n\nexport const discordBot = new DiscordBot();\n","size_bytes":1957},"server/discord/commands.ts":{"content":"import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } from 'discord.js';\nimport { storage } from '../storage';\nimport { gameEngine } from '../services/gameEngine';\nimport { explorationSystem } from '../services/explorationSystem';\nimport { combatSystem } from '../services/combatSystem';\nimport { economySystem } from '../services/economySystem';\nimport { guildSystem } from '../services/guildSystem';\n\n// Register command\nconst register = {\n  data: new SlashCommandBuilder()\n    .setName('register')\n    .setDescription('Register to start your space exploration journey'),\n  \n  async execute(interaction: any) {\n    try {\n      const discordId = interaction.user.id;\n      const username = interaction.user.username;\n\n      const existingUser = await storage.getUserByDiscordId(discordId);\n      if (existingUser) {\n        return interaction.reply({ content: 'You are already registered, Commander!', ephemeral: true });\n      }\n\n      const user = await gameEngine.registerUser({\n        discordId,\n        username,\n        level: 1,\n        experience: 0,\n        credits: 1000,\n        nexium: 25,\n        stats: { exploration: 0, combat: 0, artifacts: 0, trades: 0 }\n      });\n\n      const embed = new EmbedBuilder()\n        .setColor(0x00D4FF)\n        .setTitle('🚀 Welcome to Stellar Nexus!')\n        .setDescription(`Commander **${username}**, your journey begins now!`)\n        .addFields(\n          { name: '💰 Credits', value: '1,000', inline: true },\n          { name: '💎 Nexium', value: '25', inline: true },\n          { name: '🚢 Starting Ship', value: 'Swiftwing Scout', inline: true }\n        )\n        .setFooter({ text: 'Use /profile to view your stats' });\n\n      await interaction.reply({ embeds: [embed] });\n    } catch (error) {\n      console.error('Registration error:', error);\n      await interaction.reply({ content: 'Registration failed. Please try again.', ephemeral: true });\n    }\n  }\n};\n\n// Profile command\nconst profile = {\n  data: new SlashCommandBuilder()\n    .setName('profile')\n    .setDescription('View your commander profile and stats'),\n  \n  async execute(interaction: any) {\n    try {\n      const user = await storage.getUserByDiscordId(interaction.user.id);\n      if (!user) {\n        return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n      }\n\n      const ships = await storage.getUserShips(user.id);\n      const activeShip = ships.find(ship => ship.isActive);\n\n      const embed = new EmbedBuilder()\n        .setColor(0x00D4FF)\n        .setTitle(`🌟 Commander ${user.username}`)\n        .addFields(\n          { name: '📊 Level', value: (user.level || 1).toString(), inline: true },\n          { name: '💰 Credits', value: (user.credits || 0).toLocaleString(), inline: true },\n          { name: '💎 Nexium', value: (user.nexium || 0).toString(), inline: true },\n          { name: '🚢 Active Ship', value: activeShip ? `${activeShip.variant} (${activeShip.type})` : 'None', inline: true },\n          { name: '🗺️ Sectors Explored', value: (user.stats?.exploration || 0).toString(), inline: true },\n          { name: '⚔️ Battles Won', value: (user.stats?.combat || 0).toString(), inline: true }\n        );\n\n      const actionRow = new ActionRowBuilder<ButtonBuilder>()\n        .addComponents(\n          new ButtonBuilder()\n            .setCustomId('view_fleet')\n            .setLabel('🚀 Fleet')\n            .setStyle(ButtonStyle.Primary),\n          new ButtonBuilder()\n            .setCustomId('view_resources')\n            .setLabel('📦 Resources')\n            .setStyle(ButtonStyle.Secondary)\n        );\n\n      await interaction.reply({ embeds: [embed], components: [actionRow] });\n    } catch (error) {\n      console.error('Profile error:', error);\n      await interaction.reply({ content: 'Failed to load profile.', ephemeral: true });\n    }\n  }\n};\n\n// Fleet command\nconst fleet = {\n  data: new SlashCommandBuilder()\n    .setName('fleet')\n    .setDescription('Manage your ship fleet'),\n  \n  async execute(interaction: any) {\n    try {\n      const user = await storage.getUserByDiscordId(interaction.user.id);\n      if (!user) {\n        return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n      }\n\n      const ships = await storage.getUserShips(user.id);\n      \n      const embed = new EmbedBuilder()\n        .setColor(0x8B5CF6)\n        .setTitle('🚀 Your Fleet')\n        .setDescription('Manage your ships and upgrades');\n\n      ships.forEach(ship => {\n        const status = ship.isActive ? '🟢 ACTIVE' : '⚪ INACTIVE';\n        embed.addFields({\n          name: `${ship.variant} (Tier ${ship.tier})`,\n          value: `${status}\\n**Type**: ${ship.type}\\n**Health**: ${ship.health}/${ship.maxHealth}\\n**Speed**: ${ship.speed} | **Cargo**: ${ship.cargo} | **Weapons**: ${ship.weapons}`,\n          inline: true\n        });\n      });\n\n      const selectMenu = new StringSelectMenuBuilder()\n        .setCustomId('select_ship')\n        .setPlaceholder('Select a ship to activate or upgrade');\n\n      ships.forEach(ship => {\n        selectMenu.addOptions({\n          label: `${ship.variant} (${ship.type})`,\n          description: `Tier ${ship.tier} - Health: ${ship.health}/${ship.maxHealth}`,\n          value: ship.id\n        });\n      });\n\n      const actionRow = new ActionRowBuilder<StringSelectMenuBuilder>()\n        .addComponents(selectMenu);\n\n      await interaction.reply({ embeds: [embed], components: [actionRow] });\n    } catch (error) {\n      console.error('Fleet error:', error);\n      await interaction.reply({ content: 'Failed to load fleet.', ephemeral: true });\n    }\n  }\n};\n\n// Explore command\nconst explore = {\n  data: new SlashCommandBuilder()\n    .setName('explore')\n    .setDescription('Explore space sectors for resources and discoveries')\n    .addStringOption(option =>\n      option.setName('type')\n        .setDescription('Type of exploration')\n        .setRequired(true)\n        .addChoices(\n          { name: '🔍 Sector Scan', value: 'exploration' },\n          { name: '🎯 Resource Hunt', value: 'hunting' },\n          { name: '🏺 Artifact Search', value: 'artifact_search' },\n          { name: '🐟 Fishing', value: 'fishing' }\n        )),\n  \n  async execute(interaction: any) {\n    try {\n      const user = await storage.getUserByDiscordId(interaction.user.id);\n      if (!user) {\n        return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n      }\n\n      const explorationType = interaction.options.getString('type');\n      const result = await explorationSystem.explore(user.id, explorationType, 'auto');\n\n      const embed = new EmbedBuilder()\n        .setColor(result.result?.success ? 0x00FF00 : 0xFFFF00)\n        .setTitle(`🌌 ${explorationType.toUpperCase()} COMPLETE`)\n        .setDescription(result.result?.success ? 'Exploration successful!' : 'Exploration yielded minimal results');\n\n      if (result.result?.rewards && result.result.rewards.length > 0) {\n        const rewardText = result.result.rewards.map(reward => \n          `${reward.name} x${reward.quantity} (${reward.value} credits)`\n        ).join('\\n');\n        embed.addFields({ name: '🎁 Rewards', value: rewardText });\n      }\n\n      embed.addFields(\n        { name: '⭐ Experience Gained', value: (result.result?.experience || 0).toString(), inline: true },\n        { name: '📍 Sector', value: result.sector, inline: true }\n      );\n\n      await interaction.reply({ embeds: [embed] });\n    } catch (error) {\n      console.error('Explore error:', error);\n      await interaction.reply({ content: 'Exploration failed. Please try again.', ephemeral: true });\n    }\n  }\n};\n\n// Combat command\nconst combat = {\n  data: new SlashCommandBuilder()\n    .setName('combat')\n    .setDescription('Engage in combat')\n    .addStringOption(option =>\n      option.setName('type')\n        .setDescription('Combat type')\n        .setRequired(true)\n        .addChoices(\n          { name: '🤖 PvE Battle', value: 'pve' },\n          { name: '⚔️ PvP Duel', value: 'pvp' }\n        ))\n    .addUserOption(option =>\n      option.setName('opponent')\n        .setDescription('Opponent for PvP (required for PvP)')\n        .setRequired(false)),\n  \n  async execute(interaction: any) {\n    try {\n      const user = await storage.getUserByDiscordId(interaction.user.id);\n      if (!user) {\n        return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n      }\n\n      const combatType = interaction.options.getString('type');\n      let result;\n\n      if (combatType === 'pve') {\n        result = await combatSystem.pveCompat(user.id, 'random');\n      } else {\n        const opponent = interaction.options.getUser('opponent');\n        if (!opponent) {\n          return interaction.reply({ content: 'PvP combat requires an opponent!', ephemeral: true });\n        }\n        \n        const opponentUser = await storage.getUserByDiscordId(opponent.id);\n        if (!opponentUser) {\n          return interaction.reply({ content: 'Opponent is not registered!', ephemeral: true });\n        }\n\n        result = await combatSystem.pvpCombat(user.id, opponentUser.id);\n      }\n\n      const embed = new EmbedBuilder()\n        .setColor(result.result?.winner === user.id ? 0x00FF00 : 0xFF0000)\n        .setTitle(`⚔️ COMBAT ${result.result?.winner === user.id ? 'VICTORY' : 'DEFEAT'}`)\n        .addFields(\n          { name: '🔥 Damage Dealt', value: (result.result?.attackerDamage || 0).toString(), inline: true },\n          { name: '💥 Damage Received', value: (result.result?.defenderDamage || 0).toString(), inline: true },\n          { name: '⭐ Experience', value: (result.result?.experience || 0).toString(), inline: true }\n        );\n\n      if (result.result?.rewards && result.result.rewards.length > 0) {\n        const rewardText = result.result.rewards.map(reward => \n          `${reward.name} x${reward.quantity}`\n        ).join('\\n');\n        embed.addFields({ name: '🎁 Rewards', value: rewardText });\n      }\n\n      await interaction.reply({ embeds: [embed] });\n    } catch (error) {\n      console.error('Combat error:', error);\n      await interaction.reply({ content: 'Combat failed. Please try again.', ephemeral: true });\n    }\n  }\n};\n\n// Market command\nconst market = {\n  data: new SlashCommandBuilder()\n    .setName('market')\n    .setDescription('Access the galactic market'),\n  \n  async execute(interaction: any) {\n    try {\n      const marketItems = await economySystem.getMarketItems();\n      \n      const embed = new EmbedBuilder()\n        .setColor(0xFFD700)\n        .setTitle('🏪 Galactic Market')\n        .setDescription('Buy and sell resources across the galaxy');\n\n      marketItems.slice(0, 10).forEach(item => {\n        embed.addFields({\n          name: item.name,\n          value: `💰 ${item.price} credits\\n📊 ${item.type}`,\n          inline: true\n        });\n      });\n\n      const actionRow = new ActionRowBuilder<ButtonBuilder>()\n        .addComponents(\n          new ButtonBuilder()\n            .setCustomId('market_buy')\n            .setLabel('💳 Buy Items')\n            .setStyle(ButtonStyle.Success),\n          new ButtonBuilder()\n            .setCustomId('market_sell')\n            .setLabel('💸 Sell Resources')\n            .setStyle(ButtonStyle.Primary)\n        );\n\n      await interaction.reply({ embeds: [embed], components: [actionRow] });\n    } catch (error) {\n      console.error('Market error:', error);\n      await interaction.reply({ content: 'Failed to load market.', ephemeral: true });\n    }\n  }\n};\n\n// Guild command\nconst guild = {\n  data: new SlashCommandBuilder()\n    .setName('guild')\n    .setDescription('Manage guild membership and activities'),\n  \n  async execute(interaction: any) {\n    try {\n      const user = await storage.getUserByDiscordId(interaction.user.id);\n      if (!user) {\n        return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n      }\n\n      const guilds = await storage.getAllGuilds();\n      \n      if (user.guildId) {\n        const userGuild = await storage.getGuild(user.guildId);\n        const embed = new EmbedBuilder()\n          .setColor(0x8B5CF6)\n          .setTitle(`🛡️ ${userGuild?.name}`)\n          .setDescription(`Guild Level: ${userGuild?.level}`)\n          .addFields(\n            { name: '👥 Members', value: `${userGuild?.memberCount}/${userGuild?.maxMembers}`, inline: true },\n            { name: '📊 Type', value: userGuild?.type || 'Unknown', inline: true }\n          );\n\n        const actionRow = new ActionRowBuilder<ButtonBuilder>()\n          .addComponents(\n            new ButtonBuilder()\n              .setCustomId('guild_contribute')\n              .setLabel('💎 Contribute')\n              .setStyle(ButtonStyle.Primary),\n            new ButtonBuilder()\n              .setCustomId('guild_leave')\n              .setLabel('🚪 Leave Guild')\n              .setStyle(ButtonStyle.Danger)\n          );\n\n        await interaction.reply({ embeds: [embed], components: [actionRow] });\n      } else {\n        const embed = new EmbedBuilder()\n          .setColor(0x8B5CF6)\n          .setTitle('🛡️ Available Guilds')\n          .setDescription('Choose a guild to join:');\n\n        guilds.forEach(guild => {\n          embed.addFields({\n            name: guild.name,\n            value: `**Type**: ${guild.type}\\n**Level**: ${guild.level}\\n**Members**: ${guild.memberCount}/${guild.maxMembers}`,\n            inline: true\n          });\n        });\n\n        const selectMenu = new StringSelectMenuBuilder()\n          .setCustomId('select_guild')\n          .setPlaceholder('Select a guild to join');\n\n        guilds.forEach(guild => {\n          selectMenu.addOptions({\n            label: guild.name,\n            description: `${guild.type} - Level ${guild.level}`,\n            value: guild.id\n          });\n        });\n\n        const actionRow = new ActionRowBuilder<StringSelectMenuBuilder>()\n          .addComponents(selectMenu);\n\n        await interaction.reply({ embeds: [embed], components: [actionRow] });\n      }\n    } catch (error) {\n      console.error('Guild error:', error);\n      await interaction.reply({ content: 'Failed to load guild information.', ephemeral: true });\n    }\n  }\n};\n\nexport const commands = [\n  register,\n  profile,\n  fleet,\n  explore,\n  combat,\n  market,\n  guild\n];\n","size_bytes":14493},"server/discord/handlers.ts":{"content":"import { CommandInteraction, ButtonInteraction, StringSelectMenuInteraction, Collection } from 'discord.js';\nimport { storage } from '../storage';\nimport { gameEngine } from '../services/gameEngine';\nimport { guildSystem } from '../services/guildSystem';\nimport { economySystem } from '../services/economySystem';\n\nexport async function handleInteraction(interaction: any, commands: Collection<string, any>) {\n  if (interaction.isChatInputCommand()) {\n    await handleSlashCommand(interaction, commands);\n  } else if (interaction.isButton()) {\n    await handleButtonInteraction(interaction);\n  } else if (interaction.isStringSelectMenu()) {\n    await handleSelectMenuInteraction(interaction);\n  }\n}\n\nasync function handleSlashCommand(interaction: CommandInteraction, commands: Collection<string, any>) {\n  const command = commands.get(interaction.commandName);\n  \n  if (!command) {\n    console.error(`No command matching ${interaction.commandName} was found.`);\n    return;\n  }\n\n  try {\n    await command.execute(interaction);\n  } catch (error) {\n    console.error('Error executing command:', error);\n    \n    const errorResponse = { \n      content: 'There was an error while executing this command!', \n      ephemeral: true \n    };\n\n    if (interaction.replied || interaction.deferred) {\n      await interaction.followUp(errorResponse);\n    } else {\n      await interaction.reply(errorResponse);\n    }\n  }\n}\n\nasync function handleButtonInteraction(interaction: ButtonInteraction) {\n  const { customId } = interaction;\n\n  try {\n    const user = await storage.getUserByDiscordId(interaction.user.id);\n    if (!user) {\n      return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n    }\n\n    switch (customId) {\n      case 'view_fleet':\n        await handleViewFleet(interaction, user.id);\n        break;\n      \n      case 'view_resources':\n        await handleViewResources(interaction, user.id);\n        break;\n      \n      case 'market_buy':\n        await handleMarketBuy(interaction, user.id);\n        break;\n      \n      case 'market_sell':\n        await handleMarketSell(interaction, user.id);\n        break;\n      \n      case 'guild_contribute':\n        await handleGuildContribute(interaction, user.id);\n        break;\n      \n      case 'guild_leave':\n        await handleGuildLeave(interaction, user.id);\n        break;\n      \n      default:\n        await interaction.reply({ content: 'Unknown action!', ephemeral: true });\n    }\n  } catch (error) {\n    console.error('Button interaction error:', error);\n    await interaction.reply({ content: 'Action failed. Please try again.', ephemeral: true });\n  }\n}\n\nasync function handleSelectMenuInteraction(interaction: StringSelectMenuInteraction) {\n  const { customId, values } = interaction;\n\n  try {\n    const user = await storage.getUserByDiscordId(interaction.user.id);\n    if (!user) {\n      return interaction.reply({ content: 'You need to register first! Use `/register`', ephemeral: true });\n    }\n\n    switch (customId) {\n      case 'select_ship':\n        await handleShipSelection(interaction, user.id, values[0]);\n        break;\n      \n      case 'select_guild':\n        await handleGuildSelection(interaction, user.id, values[0]);\n        break;\n      \n      default:\n        await interaction.reply({ content: 'Unknown selection!', ephemeral: true });\n    }\n  } catch (error) {\n    console.error('Select menu interaction error:', error);\n    await interaction.reply({ content: 'Selection failed. Please try again.', ephemeral: true });\n  }\n}\n\nasync function handleViewFleet(interaction: ButtonInteraction, userId: string) {\n  const ships = await storage.getUserShips(userId);\n  \n  let fleetText = '🚀 **Your Fleet:**\\n\\n';\n  ships.forEach(ship => {\n    const status = ship.isActive ? '🟢' : '⚪';\n    fleetText += `${status} **${ship.variant}** (${ship.type} T${ship.tier})\\n`;\n    fleetText += `   HP: ${ship.health}/${ship.maxHealth} | Speed: ${ship.speed} | Cargo: ${ship.cargo}\\n\\n`;\n  });\n\n  await interaction.reply({ content: fleetText, ephemeral: true });\n}\n\nasync function handleViewResources(interaction: ButtonInteraction, userId: string) {\n  const resources = await storage.getUserResources(userId);\n  \n  let resourceText = '📦 **Your Resources:**\\n\\n';\n  resources.forEach(resource => {\n    resourceText += `• **${resource.name}** x${resource.quantity} (${resource.rarity})\\n`;\n  });\n\n  if (resources.length === 0) {\n    resourceText += 'No resources found. Start exploring to gather materials!';\n  }\n\n  await interaction.reply({ content: resourceText, ephemeral: true });\n}\n\nasync function handleMarketBuy(interaction: ButtonInteraction, userId: string) {\n  await interaction.reply({ \n    content: '🏪 Market purchasing is available through the web dashboard or use specific buy commands!', \n    ephemeral: true \n  });\n}\n\nasync function handleMarketSell(interaction: ButtonInteraction, userId: string) {\n  await interaction.reply({ \n    content: '💸 Market selling is available through the web dashboard or use specific sell commands!', \n    ephemeral: true \n  });\n}\n\nasync function handleGuildContribute(interaction: ButtonInteraction, userId: string) {\n  await interaction.reply({ \n    content: '💎 Use `/guild contribute` to contribute resources to your guild!', \n    ephemeral: true \n  });\n}\n\nasync function handleGuildLeave(interaction: ButtonInteraction, userId: string) {\n  if (!userId) return;\n  \n  await storage.updateUser(userId, { guildId: null });\n  await interaction.reply({ content: '🚪 You have left your guild.', ephemeral: true });\n}\n\nasync function handleShipSelection(interaction: StringSelectMenuInteraction, userId: string, shipId: string) {\n  await storage.setActiveShip(userId, shipId);\n  \n  const ship = await storage.getShip(shipId);\n  await interaction.reply({ \n    content: `🚀 **${ship?.variant}** is now your active ship!`, \n    ephemeral: true \n  });\n}\n\nasync function handleGuildSelection(interaction: StringSelectMenuInteraction, userId: string, guildId: string) {\n  const result = await guildSystem.joinGuild(userId, guildId);\n  \n  if (result.success) {\n    await interaction.reply({ \n      content: `🛡️ You have joined **${result.guild?.name}**!`, \n      ephemeral: true \n    });\n  } else {\n    await interaction.reply({ \n      content: `❌ Failed to join guild: ${result.error}`, \n      ephemeral: true \n    });\n  }\n}\n","size_bytes":6403},"server/generators/contentGenerator.ts":{"content":"import { nameGenerator } from './nameGenerator';\nimport { planetGenerator } from './planetGenerator';\nimport { creatureGenerator } from './creatureGenerator';\nimport { loreGenerator } from './loreGenerator';\nimport { recipeGenerator } from './recipeGenerator';\n\nclass ContentGenerator {\n  generateSectorName(): string {\n    const prefixes = ['Alpha', 'Beta', 'Gamma', 'Delta', 'Omega', 'Sigma', 'Nexus', 'Void', 'Nova', 'Stellar'];\n    const suffixes = ['Prime', 'Core', 'Rim', 'Drift', 'Gate', 'Haven', 'Expanse', 'Cluster'];\n    const numbers = Math.floor(Math.random() * 999) + 1;\n    \n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n    \n    return `${prefix}-${suffix}-${numbers}`;\n  }\n\n  generateSectorData(sectorName: string) {\n    return {\n      name: sectorName,\n      difficulty: Math.floor(Math.random() * 5) + 1,\n      resources: this.generateSectorResources(),\n      planets: Math.floor(Math.random() * 5) + 1,\n      hostiles: Math.random() > 0.7,\n      phenomena: this.generateSpacePhenomena()\n    };\n  }\n\n  private generateSectorResources() {\n    const resources = [\n      'Iron Ore', 'Titanium', 'Nexium Crystal', 'Quantum Matter', 'Dark Energy',\n      'Plasma Core', 'Crystalline Matrix', 'Alien Artifact', 'Rare Metals', 'Energy Cells'\n    ];\n    \n    const sectorResources = [];\n    const numResources = Math.floor(Math.random() * 4) + 1;\n    \n    for (let i = 0; i < numResources; i++) {\n      const resource = resources[Math.floor(Math.random() * resources.length)];\n      sectorResources.push({\n        name: resource,\n        abundance: Math.random(),\n        extractionDifficulty: Math.floor(Math.random() * 5) + 1\n      });\n    }\n    \n    return sectorResources;\n  }\n\n  private generateSpacePhenomena() {\n    const phenomena = [\n      'Solar Storm', 'Gravitational Anomaly', 'Nebula Cloud', 'Asteroid Field',\n      'Quantum Rift', 'Black Hole Proximity', 'Wormhole', 'Ion Storm'\n    ];\n    \n    if (Math.random() > 0.6) {\n      return phenomena[Math.floor(Math.random() * phenomena.length)];\n    }\n    return null;\n  }\n\n  generateEnemy(type: string = 'random', playerLevel: number = 1) {\n    const enemyTypes = [\n      { name: 'Space Pirate', weapons: 2, difficulty: 1 },\n      { name: 'Rogue Miner', weapons: 1, difficulty: 1 },\n      { name: 'Alien Patrol', weapons: 3, difficulty: 2 },\n      { name: 'Void Hunter', weapons: 4, difficulty: 3 },\n      { name: 'Quantum Specter', weapons: 2, difficulty: 4 },\n      { name: 'Dark Fleet Destroyer', weapons: 6, difficulty: 5 }\n    ];\n\n    let enemy;\n    if (type === 'random') {\n      const maxDifficulty = Math.min(5, Math.floor(playerLevel / 5) + 1);\n      const availableEnemies = enemyTypes.filter(e => e.difficulty <= maxDifficulty);\n      enemy = availableEnemies[Math.floor(Math.random() * availableEnemies.length)];\n    } else {\n      enemy = enemyTypes.find(e => e.name.toLowerCase().includes(type.toLowerCase())) || enemyTypes[0];\n    }\n\n    const levelMultiplier = 1 + (playerLevel - 1) * 0.1;\n    \n    return {\n      name: enemy.name,\n      weapons: Math.floor(enemy.weapons * levelMultiplier),\n      difficulty: enemy.difficulty,\n      power: Math.floor((enemy.weapons * 50 + enemy.difficulty * 100) * levelMultiplier),\n      health: Math.floor((enemy.difficulty * 80 + 100) * levelMultiplier)\n    };\n  }\n\n  generateAvailableSectors(userLevel: number) {\n    const sectors = [];\n    const maxSectors = Math.min(10, userLevel + 2);\n    \n    for (let i = 0; i < maxSectors; i++) {\n      sectors.push({\n        name: this.generateSectorName(),\n        difficulty: Math.floor(Math.random() * Math.min(5, userLevel)) + 1,\n        discovered: Math.random() > 0.3\n      });\n    }\n    \n    return sectors;\n  }\n\n  generateDailyMarketDeals(userLevel: number) {\n    const deals = [];\n    const numDeals = Math.floor(Math.random() * 3) + 2;\n    \n    const items = [\n      'Quantum Core', 'Plasma Cannon', 'Shield Generator', 'Hyperspace Fuel',\n      'Titanium Alloy', 'Energy Cell', 'Nexium Crystal', 'AI Core'\n    ];\n    \n    for (let i = 0; i < numDeals; i++) {\n      const item = items[Math.floor(Math.random() * items.length)];\n      const basePrice = Math.floor(Math.random() * 1000) + 100;\n      const discount = Math.floor(Math.random() * 30) + 10;\n      \n      deals.push({\n        name: item,\n        originalPrice: basePrice,\n        salePrice: Math.floor(basePrice * (1 - discount / 100)),\n        discount: discount,\n        timeLeft: Math.floor(Math.random() * 23) + 1 // hours\n      });\n    }\n    \n    return deals;\n  }\n\n  generateRandomEvent(userLevel: number) {\n    const events = [\n      {\n        name: 'Mysterious Signal',\n        description: 'Your sensors detect an unknown transmission',\n        type: 'exploration',\n        rewards: ['credits', 'experience']\n      },\n      {\n        name: 'Merchant in Distress',\n        description: 'A trader requests assistance',\n        type: 'choice',\n        rewards: ['credits', 'reputation']\n      },\n      {\n        name: 'Ancient Relic',\n        description: 'Scans reveal an ancient artifact nearby',\n        type: 'artifact',\n        rewards: ['artifact', 'experience']\n      }\n    ];\n    \n    return events[Math.floor(Math.random() * events.length)];\n  }\n\n  // Delegate to specialized generators\n  generateName(type: string) {\n    return nameGenerator.generate(type);\n  }\n\n  generatePlanet() {\n    return planetGenerator.generate();\n  }\n\n  generateCreature() {\n    return creatureGenerator.generate();\n  }\n\n  generateLore() {\n    return loreGenerator.generate();\n  }\n\n  generateRecipe(type: string) {\n    return recipeGenerator.generate(type);\n  }\n}\n\nexport const contentGenerator = new ContentGenerator();\n","size_bytes":5750},"server/generators/creatureGenerator.ts":{"content":"import { nameGenerator } from './nameGenerator';\n\ninterface Creature {\n  name: string;\n  type: string;\n  size: string;\n  habitat: string;\n  danger_level: number;\n  abilities: string[];\n  description: string;\n  rarity: string;\n  health: number;\n  damage: number;\n  defense: number;\n  loot: Array<{\n    name: string;\n    type: string;\n    rarity: string;\n    value: number;\n    dropChance: number;\n  }>;\n}\n\nclass CreatureGenerator {\n  private readonly creatureTypes = [\n    'Crystalline', 'Mechanical', 'Energy-based', 'Organic', 'Hybrid',\n    'Gaseous', 'Plasma', 'Quantum', 'Ethereal', 'Silicon-based'\n  ];\n\n  private readonly sizes = [\n    'Microscopic', 'Tiny', 'Small', 'Medium', 'Large', 'Huge', 'Colossal', 'Planetary'\n  ];\n\n  private readonly habitats = [\n    'Space Void', 'Asteroid Fields', 'Nebulae', 'Planet Surface', 'Underground Caves',\n    'Ocean Depths', 'Volcanic Regions', 'Ice Fields', 'Gas Giant Atmospheres',\n    'Orbital Stations', 'Derelict Ships', 'Energy Storms'\n  ];\n\n  private readonly abilities = [\n    'Phase Shifting', 'Energy Absorption', 'Electromagnetic Pulse', 'Camouflage',\n    'Regeneration', 'Toxic Secretion', 'Gravity Manipulation', 'Time Dilation',\n    'Matter Conversion', 'Telepathy', 'Quantum Tunneling', 'Ion Discharge',\n    'Shield Generation', 'Molecular Disruption', 'Dimensional Rift', 'Mind Control'\n  ];\n\n  private readonly prefixes = [\n    'Void', 'Quantum', 'Plasma', 'Crystal', 'Shadow', 'Nova', 'Stellar', 'Cosmic',\n    'Nebula', 'Ion', 'Hyper', 'Meta', 'Proto', 'Ultra', 'Mega', 'Nano'\n  ];\n\n  private readonly basenames = [\n    'Wyrm', 'Leviathan', 'Specter', 'Guardian', 'Hunter', 'Drifter', 'Stalker',\n    'Sentinel', 'Wraith', 'Beast', 'Entity', 'Organism', 'Anomaly', 'Horror'\n  ];\n\n  generate(biome?: string, difficulty?: number): Creature {\n    const type = this.creatureTypes[Math.floor(Math.random() * this.creatureTypes.length)];\n    const size = this.sizes[Math.floor(Math.random() * this.sizes.length)];\n    const habitat = biome || this.habitats[Math.floor(Math.random() * this.habitats.length)];\n    \n    const dangerLevel = difficulty || Math.floor(Math.random() * 5) + 1;\n    const rarity = this.determineRarity(dangerLevel);\n    \n    const name = this.generateCreatureName();\n    const abilities = this.generateAbilities(dangerLevel);\n    const description = this.generateDescription(name, type, size, habitat, abilities);\n    \n    const stats = this.generateStats(size, dangerLevel);\n    const loot = this.generateLoot(rarity, dangerLevel);\n\n    return {\n      name,\n      type,\n      size,\n      habitat,\n      danger_level: dangerLevel,\n      abilities,\n      description,\n      rarity,\n      health: stats.health,\n      damage: stats.damage,\n      defense: stats.defense,\n      loot\n    };\n  }\n\n  private generateCreatureName(): string {\n    const prefix = this.prefixes[Math.floor(Math.random() * this.prefixes.length)];\n    const basename = this.basenames[Math.floor(Math.random() * this.basenames.length)];\n    \n    if (Math.random() > 0.5) {\n      return `${prefix} ${basename}`;\n    } else {\n      const alienName = nameGenerator.generate('alien');\n      return `${basename} of ${alienName}`;\n    }\n  }\n\n  private generateAbilities(dangerLevel: number): string[] {\n    const numAbilities = Math.min(4, Math.floor(dangerLevel / 2) + 1);\n    const selectedAbilities: string[] = [];\n    \n    for (let i = 0; i < numAbilities; i++) {\n      let ability;\n      do {\n        ability = this.abilities[Math.floor(Math.random() * this.abilities.length)];\n      } while (selectedAbilities.includes(ability));\n      \n      selectedAbilities.push(ability);\n    }\n    \n    return selectedAbilities;\n  }\n\n  private generateDescription(name: string, type: string, size: string, habitat: string, abilities: string[]): string {\n    const descriptions = [\n      `The ${name} is a ${size.toLowerCase()} ${type.toLowerCase()} creature found in ${habitat.toLowerCase()}.`,\n      `This ${type.toLowerCase()} entity roams the ${habitat.toLowerCase()}, using its ${abilities[0]?.toLowerCase()} ability to survive.`,\n      `A mysterious ${size.toLowerCase()} being that haunts ${habitat.toLowerCase()}, known for its deadly ${abilities[0]?.toLowerCase()} attacks.`\n    ];\n    \n    let baseDesc = descriptions[Math.floor(Math.random() * descriptions.length)];\n    \n    if (abilities.length > 1) {\n      baseDesc += ` It possesses multiple abilities including ${abilities.slice(1).join(', ').toLowerCase()}.`;\n    }\n    \n    return baseDesc;\n  }\n\n  private generateStats(size: string, dangerLevel: number) {\n    const sizeMultipliers = {\n      'Microscopic': 0.1,\n      'Tiny': 0.3,\n      'Small': 0.7,\n      'Medium': 1.0,\n      'Large': 1.5,\n      'Huge': 2.5,\n      'Colossal': 4.0,\n      'Planetary': 10.0\n    };\n    \n    const baseHealth = 100;\n    const baseDamage = 25;\n    const baseDefense = 10;\n    \n    const sizeMultiplier = sizeMultipliers[size as keyof typeof sizeMultipliers] || 1.0;\n    const levelMultiplier = 1 + (dangerLevel - 1) * 0.3;\n    \n    return {\n      health: Math.floor(baseHealth * sizeMultiplier * levelMultiplier),\n      damage: Math.floor(baseDamage * sizeMultiplier * levelMultiplier),\n      defense: Math.floor(baseDefense * sizeMultiplier * levelMultiplier)\n    };\n  }\n\n  private generateLoot(rarity: string, dangerLevel: number) {\n    const lootTable = [\n      { name: 'Organic Matter', type: 'material', rarity: 'common', value: 10, dropChance: 0.8 },\n      { name: 'Energy Residue', type: 'material', rarity: 'common', value: 15, dropChance: 0.6 },\n      { name: 'Creature Essence', type: 'component', rarity: 'uncommon', value: 50, dropChance: 0.4 },\n      { name: 'Alien Genetic Sample', type: 'artifact', rarity: 'rare', value: 200, dropChance: 0.2 },\n      { name: 'Quantum Biomatter', type: 'artifact', rarity: 'epic', value: 500, dropChance: 0.1 },\n      { name: 'Living Crystal', type: 'artifact', rarity: 'legendary', value: 1000, dropChance: 0.05 }\n    ];\n    \n    const possibleLoot = lootTable.filter(item => {\n      const rarityOrder = ['common', 'uncommon', 'rare', 'epic', 'legendary'];\n      const itemRarityIndex = rarityOrder.indexOf(item.rarity);\n      const creatureRarityIndex = rarityOrder.indexOf(rarity);\n      \n      return itemRarityIndex <= creatureRarityIndex + 1;\n    });\n    \n    return possibleLoot.map(item => ({\n      ...item,\n      value: Math.floor(item.value * (1 + dangerLevel * 0.2))\n    }));\n  }\n\n  private determineRarity(dangerLevel: number): string {\n    if (dangerLevel <= 1) return 'common';\n    if (dangerLevel <= 2) return 'uncommon';\n    if (dangerLevel <= 3) return 'rare';\n    if (dangerLevel <= 4) return 'epic';\n    return 'legendary';\n  }\n\n  generateSwarm(baseCreature?: Creature): Creature[] {\n    const swarmSize = Math.floor(Math.random() * 8) + 3; // 3-10 creatures\n    const swarm: Creature[] = [];\n    \n    for (let i = 0; i < swarmSize; i++) {\n      const creature = baseCreature ? { ...baseCreature } : this.generate();\n      creature.name = `${creature.name} Swarm Member ${i + 1}`;\n      creature.health = Math.floor(creature.health * 0.6); // Weaker individually\n      creature.damage = Math.floor(creature.damage * 0.8);\n      swarm.push(creature);\n    }\n    \n    return swarm;\n  }\n\n  generateBoss(region: string, playerLevel: number): Creature {\n    const baseDangerLevel = Math.min(5, Math.floor(playerLevel / 10) + 3);\n    const boss = this.generate(region, baseDangerLevel);\n    \n    // Enhance boss stats\n    boss.name = `${boss.name} Prime`;\n    boss.health *= 3;\n    boss.damage *= 2;\n    boss.defense *= 1.5;\n    boss.rarity = 'legendary';\n    \n    // Add boss-specific abilities\n    boss.abilities.push('Area of Effect Attacks', 'Enrage Mode', 'Summon Minions');\n    \n    // Enhanced loot\n    boss.loot = boss.loot.map(item => ({\n      ...item,\n      value: item.value * 3,\n      dropChance: Math.min(1.0, item.dropChance * 1.5)\n    }));\n    \n    return boss;\n  }\n}\n\nexport const creatureGenerator = new CreatureGenerator();\n","size_bytes":7987},"server/generators/loreGenerator.ts":{"content":"import { nameGenerator } from './nameGenerator';\n\ninterface LoreEntry {\n  title: string;\n  type: 'history' | 'legend' | 'species' | 'technology' | 'location' | 'event';\n  content: string;\n  era: string;\n  significance: 'minor' | 'major' | 'critical' | 'legendary';\n  related_entities: string[];\n  tags: string[];\n}\n\nclass LoreGenerator {\n  private readonly eras = [\n    'The First Expansion', 'Age of Discovery', 'The Great War', 'Time of Silence',\n    'The Nexus Awakening', 'Era of Reconstruction', 'The Quantum Renaissance',\n    'The Void Incursion', 'The Unity Period', 'The Current Era'\n  ];\n\n  private readonly speciesTemplates = [\n    'The ancient {species} were known for their mastery of {technology}. They built great {structures} across {location} before mysteriously vanishing during {event}.',\n    '{species} are a proud warrior race from the {location} system. Their culture revolves around {concept} and they are feared throughout the galaxy for their {ability}.',\n    'The enigmatic {species} exist primarily as {form} beings. They communicate through {method} and possess an innate understanding of {science}.'\n  ];\n\n  private readonly technologyTemplates = [\n    'The {technology} was first developed by the {species} during {era}. This revolutionary advancement allowed for {capability} and changed the course of galactic civilization.',\n    '{technology} remains one of the most mysterious inventions ever created. Found in ancient {location} ruins, it operates on principles that modern science still cannot fully explain.',\n    'The discovery of {technology} led to the {event}, fundamentally altering how species interact with {concept}.'\n  ];\n\n  private readonly eventTemplates = [\n    'The {event} occurred during {era} when {species} attempted to {action}. The consequences of this event are still felt today as {result}.',\n    'Few remember the true cause of {event}. Some say it was triggered by {cause}, while others believe {alternative_cause}. What is certain is that {outcome}.',\n    '{event} marked the beginning of {era}. The {species} archives describe it as {description}, though many details have been lost to time.'\n  ];\n\n  private readonly concepts = [\n    'honor', 'knowledge', 'power', 'harmony', 'survival', 'transcendence',\n    'unity', 'freedom', 'order', 'chaos', 'balance', 'evolution'\n  ];\n\n  private readonly technologies = [\n    'Quantum Tunneling', 'Neural Interface Technology', 'Dimensional Manipulation',\n    'Time Dilation Fields', 'Consciousness Transfer', 'Matter Conversion',\n    'Gravity Wells', 'Plasma Forging', 'Bioengineering', 'AI Synthesis'\n  ];\n\n  private readonly abilities = [\n    'telepathic communication', 'energy manipulation', 'phase shifting',\n    'precognitive abilities', 'molecular control', 'reality warping',\n    'dimensional sight', 'time perception', 'quantum entanglement'\n  ];\n\n  generate(type?: string): LoreEntry {\n    const loreType = type as LoreEntry['type'] || this.getRandomType();\n    \n    switch (loreType) {\n      case 'species':\n        return this.generateSpeciesLore();\n      case 'technology':\n        return this.generateTechnologyLore();\n      case 'history':\n        return this.generateHistoryLore();\n      case 'legend':\n        return this.generateLegendLore();\n      case 'location':\n        return this.generateLocationLore();\n      case 'event':\n        return this.generateEventLore();\n      default:\n        return this.generateRandomLore();\n    }\n  }\n\n  private getRandomType(): LoreEntry['type'] {\n    const types: LoreEntry['type'][] = ['history', 'legend', 'species', 'technology', 'location', 'event'];\n    return types[Math.floor(Math.random() * types.length)];\n  }\n\n  private generateSpeciesLore(): LoreEntry {\n    const species = nameGenerator.generate('alien');\n    const technology = this.technologies[Math.floor(Math.random() * this.technologies.length)];\n    const location = nameGenerator.generate('planet');\n    const ability = this.abilities[Math.floor(Math.random() * this.abilities.length)];\n    const concept = this.concepts[Math.floor(Math.random() * this.concepts.length)];\n    const era = this.eras[Math.floor(Math.random() * this.eras.length)];\n\n    const template = this.speciesTemplates[Math.floor(Math.random() * this.speciesTemplates.length)];\n    const content = template\n      .replace(/{species}/g, species)\n      .replace(/{technology}/g, technology)\n      .replace(/{location}/g, location)\n      .replace(/{ability}/g, ability)\n      .replace(/{concept}/g, concept)\n      .replace(/{era}/g, era);\n\n    return {\n      title: `The ${species}`,\n      type: 'species',\n      content,\n      era,\n      significance: this.getRandomSignificance(),\n      related_entities: [species, location, technology],\n      tags: ['alien species', 'civilization', concept]\n    };\n  }\n\n  private generateTechnologyLore(): LoreEntry {\n    const technology = this.technologies[Math.floor(Math.random() * this.technologies.length)];\n    const species = nameGenerator.generate('alien');\n    const location = nameGenerator.generate('planet');\n    const era = this.eras[Math.floor(Math.random() * this.eras.length)];\n    const concept = this.concepts[Math.floor(Math.random() * this.concepts.length)];\n\n    const template = this.technologyTemplates[Math.floor(Math.random() * this.technologyTemplates.length)];\n    const content = template\n      .replace(/{technology}/g, technology)\n      .replace(/{species}/g, species)\n      .replace(/{location}/g, location)\n      .replace(/{era}/g, era)\n      .replace(/{concept}/g, concept);\n\n    return {\n      title: technology,\n      type: 'technology',\n      content,\n      era,\n      significance: this.getRandomSignificance(),\n      related_entities: [technology, species, location],\n      tags: ['technology', 'innovation', 'science']\n    };\n  }\n\n  private generateHistoryLore(): LoreEntry {\n    const era = this.eras[Math.floor(Math.random() * this.eras.length)];\n    const species1 = nameGenerator.generate('alien');\n    const species2 = nameGenerator.generate('alien');\n    const location = nameGenerator.generate('planet');\n    const event = `The ${nameGenerator.generate('station')} Incident`;\n\n    const historicalEvents = [\n      `During ${era}, the ${species1} and ${species2} formed an unprecedented alliance that would shape galactic politics for millennia. This union was forged in the aftermath of the devastating conflict at ${location}, where both species nearly faced extinction.`,\n      `${era} marked the golden age of exploration, with ${species1} vessels reaching the farthest corners of known space. The discovery of ${location} during this period led to revolutionary advances in quantum physics and interdimensional travel.`,\n      `The fall of the ${species1} Empire during ${era} was swift and unexpected. Historical records suggest that their overreliance on ${this.technologies[0]} technology may have been their downfall, though the exact cause remains disputed among scholars.`\n    ];\n\n    const content = historicalEvents[Math.floor(Math.random() * historicalEvents.length)];\n\n    return {\n      title: `Chronicles of ${era}`,\n      type: 'history',\n      content,\n      era,\n      significance: 'major',\n      related_entities: [species1, species2, location],\n      tags: ['historical', 'galactic events', 'civilization']\n    };\n  }\n\n  private generateLegendLore(): LoreEntry {\n    const hero = nameGenerator.generate('character');\n    const artifact = `${nameGenerator.generate('ship')} Crystal`;\n    const location = nameGenerator.generate('planet');\n    const ability = this.abilities[Math.floor(Math.random() * this.abilities.length)];\n\n    const legends = [\n      `Legend speaks of ${hero}, the mythical warrior who wielded the ${artifact} to defend ${location} from an unspeakable cosmic horror. It is said that ${hero} possessed the rare gift of ${ability}, allowing them to perceive threats across multiple dimensions.`,\n      `The tale of ${hero} and the Lost Expedition to ${location} has been told across countless worlds. According to legend, ${hero} discovered the secret of ${ability} within the ancient vaults beneath ${location}'s surface, but at a terrible cost.`,\n      `Few believe the stories of ${hero}, the dimension-walker who supposedly used the ${artifact} to seal away an entity of pure chaos. The legend claims that ${hero} still wanders the galaxy, watching for signs of the entity's return.`\n    ];\n\n    const content = legends[Math.floor(Math.random() * legends.length)];\n\n    return {\n      title: `The Legend of ${hero}`,\n      type: 'legend',\n      content,\n      era: 'Time of Silence', // Legends are often from mysterious eras\n      significance: 'legendary',\n      related_entities: [hero, artifact, location],\n      tags: ['mythology', 'heroes', 'artifacts', 'legends']\n    };\n  }\n\n  private generateLocationLore(): LoreEntry {\n    const location = nameGenerator.generate('planet');\n    const species = nameGenerator.generate('alien');\n    const phenomenon = `${this.technologies[0]} Storms`;\n\n    const locationTypes = [\n      `${location} is a world of perpetual twilight, where the ${phenomenon} create spectacular auroras that can be seen from orbit. The ${species} who once inhabited this world built their cities to harness the energy from these phenomena, creating architectural marvels that still function centuries after their disappearance.`,\n      `The space station known as ${location} serves as a neutral meeting ground for diplomats from across the galaxy. Its unique position at the intersection of three major hyperspace routes makes it invaluable, while its ancient ${species} construction techniques ensure it remains impregnable to attack.`,\n      `${location} appears to exist in a state of temporal flux, with different regions of the planet experiencing time at varying rates. Scientists theorize that the ${species} conducted temporal experiments here, leaving behind a legacy of chronological anomalies that continue to puzzle researchers.`\n    ];\n\n    const content = locationTypes[Math.floor(Math.random() * locationTypes.length)];\n\n    return {\n      title: location,\n      type: 'location',\n      content,\n      era: 'The Current Era',\n      significance: this.getRandomSignificance(),\n      related_entities: [location, species],\n      tags: ['locations', 'worlds', 'phenomena', 'mysteries']\n    };\n  }\n\n  private generateEventLore(): LoreEntry {\n    const event = `The ${nameGenerator.generate('station')} Convergence`;\n    const species = nameGenerator.generate('alien');\n    const era = this.eras[Math.floor(Math.random() * this.eras.length)];\n    const technology = this.technologies[Math.floor(Math.random() * this.technologies.length)];\n\n    const template = this.eventTemplates[Math.floor(Math.random() * this.eventTemplates.length)];\n    const content = template\n      .replace(/{event}/g, event)\n      .replace(/{era}/g, era)\n      .replace(/{species}/g, species)\n      .replace(/{action}/g, `harness the power of ${technology}`)\n      .replace(/{result}/g, 'fundamental changes to the fabric of space-time')\n      .replace(/{cause}/g, 'experimental quantum technology')\n      .replace(/{alternative_cause}/g, 'intervention by unknown entities')\n      .replace(/{outcome}/g, 'the emergence of new forms of space travel')\n      .replace(/{description}/g, 'a turning point in galactic history');\n\n    return {\n      title: event,\n      type: 'event',\n      content,\n      era,\n      significance: 'critical',\n      related_entities: [event, species, technology],\n      tags: ['major events', 'galactic history', 'consequences']\n    };\n  }\n\n  private generateRandomLore(): LoreEntry {\n    return this.generate(this.getRandomType());\n  }\n\n  private getRandomSignificance(): LoreEntry['significance'] {\n    const significances: LoreEntry['significance'][] = ['minor', 'major', 'critical', 'legendary'];\n    const weights = [0.4, 0.3, 0.2, 0.1]; // More common entries are less significant\n    \n    const random = Math.random();\n    let total = 0;\n    for (let i = 0; i < weights.length; i++) {\n      total += weights[i];\n      if (random <= total) {\n        return significances[i];\n      }\n    }\n    return 'minor';\n  }\n\n  generateCodex(entries: number = 10): LoreEntry[] {\n    const codex: LoreEntry[] = [];\n    const types: LoreEntry['type'][] = ['history', 'legend', 'species', 'technology', 'location', 'event'];\n    \n    for (let i = 0; i < entries; i++) {\n      const type = types[i % types.length];\n      codex.push(this.generate(type));\n    }\n    \n    return codex.sort((a, b) => {\n      const significanceOrder = { 'legendary': 0, 'critical': 1, 'major': 2, 'minor': 3 };\n      return significanceOrder[a.significance] - significanceOrder[b.significance];\n    });\n  }\n\n  generateQuestLore(questType: string, location: string): LoreEntry {\n    const questLore = {\n      title: `Mission Briefing: ${questType}`,\n      type: 'history' as const,\n      content: `Intelligence reports indicate unusual activity in the ${location} sector. This mission requires careful analysis of local conditions and historical context to ensure success.`,\n      era: 'The Current Era',\n      significance: 'minor' as const,\n      related_entities: [location, questType],\n      tags: ['mission', 'current events', 'briefing']\n    };\n\n    return questLore;\n  }\n}\n\nexport const loreGenerator = new LoreGenerator();\n","size_bytes":13360},"server/generators/nameGenerator.ts":{"content":"class NameGenerator {\n  private readonly spacePrefixes = [\n    'Astro', 'Cosmic', 'Galactic', 'Nebula', 'Stellar', 'Void', 'Quantum', 'Nova',\n    'Plasma', 'Ion', 'Hyper', 'Nano', 'Mega', 'Ultra', 'Cyber', 'Neo'\n  ];\n\n  private readonly spaceSuffixes = [\n    'Prime', 'Core', 'Matrix', 'Nexus', 'Forge', 'Gate', 'Haven', 'Station',\n    'Base', 'Outpost', 'Colony', 'Expanse', 'Sector', 'System', 'Cluster'\n  ];\n\n  private readonly shipNames = [\n    'Dagger', 'Falcon', 'Thunder', 'Lightning', 'Phoenix', 'Eagle', 'Hawk', 'Raven',\n    'Viper', 'Cobra', 'Serpent', 'Dragon', 'Wolf', 'Lion', 'Tiger', 'Shark',\n    'Storm', 'Tempest', 'Hurricane', 'Typhoon', 'Cyclone', 'Blizzard'\n  ];\n\n  private readonly alienNames = [\n    'Zyx', 'Keth', 'Varn', 'Thex', 'Quin', 'Raze', 'Blyx', 'Nox',\n    'Zara', 'Xel', 'Vex', 'Trix', 'Syn', 'Ryx', 'Pex', 'Nyx'\n  ];\n\n  private readonly planetTypes = [\n    'Terra', 'Aqua', 'Ignis', 'Glacies', 'Ventus', 'Lux', 'Umbra', 'Crysta',\n    'Magna', 'Silva', 'Desert', 'Ocean', 'Arctic', 'Volcanic', 'Gas'\n  ];\n\n  generate(type: string): string {\n    switch (type.toLowerCase()) {\n      case 'ship':\n        return this.generateShipName();\n      case 'planet':\n        return this.generatePlanetName();\n      case 'alien':\n      case 'character':\n        return this.generateAlienName();\n      case 'station':\n      case 'base':\n        return this.generateStationName();\n      case 'sector':\n        return this.generateSectorName();\n      default:\n        return this.generateGenericName();\n    }\n  }\n\n  private generateShipName(): string {\n    const prefix = this.spacePrefixes[Math.floor(Math.random() * this.spacePrefixes.length)];\n    const name = this.shipNames[Math.floor(Math.random() * this.shipNames.length)];\n    return `${prefix} ${name}`;\n  }\n\n  private generatePlanetName(): string {\n    const type = this.planetTypes[Math.floor(Math.random() * this.planetTypes.length)];\n    const number = Math.floor(Math.random() * 9999) + 1;\n    const letters = String.fromCharCode(65 + Math.floor(Math.random() * 26)) + \n                   String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    return `${type}-${letters}-${number}`;\n  }\n\n  private generateAlienName(): string {\n    const first = this.alienNames[Math.floor(Math.random() * this.alienNames.length)];\n    const second = this.alienNames[Math.floor(Math.random() * this.alienNames.length)];\n    const suffix = ['ar', 'on', 'ix', 'ul', 'en', 'ak'][Math.floor(Math.random() * 6)];\n    return `${first}${second}${suffix}`;\n  }\n\n  private generateStationName(): string {\n    const prefix = this.spacePrefixes[Math.floor(Math.random() * this.spacePrefixes.length)];\n    const suffix = this.spaceSuffixes[Math.floor(Math.random() * this.spaceSuffixes.length)];\n    const number = Math.floor(Math.random() * 99) + 1;\n    return `${prefix} ${suffix} ${number}`;\n  }\n\n  private generateSectorName(): string {\n    const prefix = ['Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta'][Math.floor(Math.random() * 8)];\n    const suffix = ['Centauri', 'Proxima', 'Vega', 'Sirius', 'Rigel', 'Arcturus'][Math.floor(Math.random() * 6)];\n    const number = Math.floor(Math.random() * 999) + 1;\n    return `${prefix}-${suffix}-${number}`;\n  }\n\n  private generateGenericName(): string {\n    const prefix = this.spacePrefixes[Math.floor(Math.random() * this.spacePrefixes.length)];\n    const suffix = this.spaceSuffixes[Math.floor(Math.random() * this.spaceSuffixes.length)];\n    return `${prefix} ${suffix}`;\n  }\n\n  generateCallsign(): string {\n    const letters = String.fromCharCode(65 + Math.floor(Math.random() * 26)) + \n                   String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    const numbers = Math.floor(Math.random() * 999) + 1;\n    return `${letters}-${numbers}`;\n  }\n\n  generateCrewName(): string {\n    const firstNames = [\n      'Commander', 'Captain', 'Admiral', 'Colonel', 'Major', 'Pilot', 'Navigator',\n      'Engineer', 'Medic', 'Gunner', 'Scout', 'Operative'\n    ];\n    const lastName = this.generate('alien');\n    const rank = firstNames[Math.floor(Math.random() * firstNames.length)];\n    return `${rank} ${lastName}`;\n  }\n}\n\nexport const nameGenerator = new NameGenerator();\n","size_bytes":4210},"server/generators/planetGenerator.ts":{"content":"import { nameGenerator } from './nameGenerator';\n\nclass PlanetGenerator {\n  private readonly planetTypes = [\n    'Terrestrial', 'Gas Giant', 'Ice World', 'Desert World', 'Ocean World',\n    'Volcanic', 'Crystalline', 'Metal Rich', 'Toxic', 'Artificial'\n  ];\n\n  private readonly atmospheres = [\n    'Oxygen-Rich', 'Nitrogen-Heavy', 'Methane', 'Carbon Dioxide', 'Toxic Gas',\n    'No Atmosphere', 'Hydrogen', 'Noble Gas Mix', 'Corrosive', 'Unknown Composition'\n  ];\n\n  private readonly climates = [\n    'Tropical', 'Temperate', 'Arctic', 'Desert', 'Variable',\n    'Extreme Heat', 'Extreme Cold', 'Constant Storm', 'Calm', 'Chaotic'\n  ];\n\n  generate() {\n    const name = nameGenerator.generate('planet');\n    const type = this.planetTypes[Math.floor(Math.random() * this.planetTypes.length)];\n    const atmosphere = this.atmospheres[Math.floor(Math.random() * this.atmospheres.length)];\n    const climate = this.climates[Math.floor(Math.random() * this.climates.length)];\n    \n    const gravity = Math.round((Math.random() * 2 + 0.3) * 100) / 100; // 0.3 to 2.3 G\n    const dayLength = Math.floor(Math.random() * 48) + 12; // 12 to 60 hours\n    const temperature = Math.floor(Math.random() * 400) - 100; // -100 to 300°C\n    \n    const habitability = this.calculateHabitability(type, atmosphere, climate, gravity, temperature);\n    const resources = this.generateResources(type);\n    const dangers = this.generateDangers(type, climate);\n    \n    return {\n      name,\n      type,\n      atmosphere,\n      climate,\n      gravity,\n      dayLength,\n      temperature,\n      habitability,\n      resources,\n      dangers,\n      population: this.generatePopulation(habitability),\n      points_of_interest: this.generatePointsOfInterest(),\n      exploration_difficulty: Math.floor(Math.random() * 5) + 1\n    };\n  }\n\n  private calculateHabitability(type: string, atmosphere: string, climate: string, gravity: number, temperature: number): number {\n    let score = 50;\n\n    // Type modifiers\n    if (type === 'Terrestrial') score += 30;\n    else if (type === 'Ocean World') score += 20;\n    else if (type === 'Desert World') score += 10;\n    else if (type === 'Gas Giant') score -= 40;\n    else if (type === 'Toxic') score -= 30;\n\n    // Atmosphere modifiers\n    if (atmosphere === 'Oxygen-Rich') score += 25;\n    else if (atmosphere === 'Nitrogen-Heavy') score += 15;\n    else if (atmosphere === 'No Atmosphere') score -= 30;\n    else if (atmosphere === 'Toxic Gas') score -= 25;\n\n    // Climate modifiers\n    if (climate === 'Temperate') score += 20;\n    else if (climate === 'Tropical') score += 10;\n    else if (climate === 'Extreme Heat' || climate === 'Extreme Cold') score -= 20;\n\n    // Gravity modifiers\n    if (gravity >= 0.8 && gravity <= 1.2) score += 15;\n    else if (gravity < 0.5 || gravity > 2.0) score -= 15;\n\n    // Temperature modifiers\n    if (temperature >= 0 && temperature <= 30) score += 15;\n    else if (temperature < -50 || temperature > 50) score -= 15;\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  private generateResources(type: string) {\n    const commonResources = ['Iron Ore', 'Silicon', 'Carbon', 'Water Ice'];\n    const rareResources = ['Nexium Crystal', 'Quantum Matter', 'Rare Metals', 'Energy Crystals'];\n    const uniqueResources = ['Ancient Artifacts', 'Alien Technology', 'Exotic Matter', 'Time Crystals'];\n\n    const resources = [];\n    \n    // Common resources (always present)\n    const numCommon = Math.floor(Math.random() * 3) + 1;\n    for (let i = 0; i < numCommon; i++) {\n      const resource = commonResources[Math.floor(Math.random() * commonResources.length)];\n      resources.push({\n        name: resource,\n        abundance: Math.random(),\n        extraction_difficulty: Math.floor(Math.random() * 3) + 1\n      });\n    }\n\n    // Rare resources (50% chance)\n    if (Math.random() > 0.5) {\n      const resource = rareResources[Math.floor(Math.random() * rareResources.length)];\n      resources.push({\n        name: resource,\n        abundance: Math.random() * 0.5,\n        extraction_difficulty: Math.floor(Math.random() * 3) + 3\n      });\n    }\n\n    // Unique resources (10% chance)\n    if (Math.random() > 0.9) {\n      const resource = uniqueResources[Math.floor(Math.random() * uniqueResources.length)];\n      resources.push({\n        name: resource,\n        abundance: Math.random() * 0.2,\n        extraction_difficulty: 5\n      });\n    }\n\n    return resources;\n  }\n\n  private generateDangers(type: string, climate: string) {\n    const dangers = [];\n    \n    if (type === 'Volcanic') {\n      dangers.push('Volcanic Activity', 'Toxic Gas Vents', 'Extreme Heat');\n    }\n    \n    if (type === 'Toxic') {\n      dangers.push('Poisonous Atmosphere', 'Corrosive Environment', 'Radiation');\n    }\n    \n    if (climate === 'Constant Storm') {\n      dangers.push('Severe Weather', 'Lightning Storms', 'High Winds');\n    }\n    \n    if (Math.random() > 0.7) {\n      const additionalDangers = [\n        'Hostile Wildlife', 'Ancient Guardians', 'Unstable Terrain',\n        'Magnetic Anomalies', 'Gravitational Disturbances', 'Energy Storms'\n      ];\n      dangers.push(additionalDangers[Math.floor(Math.random() * additionalDangers.length)]);\n    }\n\n    return dangers;\n  }\n\n  private generatePopulation(habitability: number) {\n    if (habitability < 20) return 'Uninhabited';\n    if (habitability < 40) return 'Research Outpost';\n    if (habitability < 60) return 'Small Colony';\n    if (habitability < 80) return 'Established Settlement';\n    return 'Major Population Center';\n  }\n\n  private generatePointsOfInterest() {\n    const poi = [\n      'Ancient Ruins', 'Crashed Starship', 'Natural Wonder', 'Mining Operation',\n      'Research Facility', 'Alien Monolith', 'Energy Anomaly', 'Hidden Cave System',\n      'Orbital Debris', 'Strange Formation', 'Underground Lake', 'Crystal Caverns'\n    ];\n\n    const interests = [];\n    const numPOI = Math.floor(Math.random() * 4);\n    \n    for (let i = 0; i < numPOI; i++) {\n      const interest = poi[Math.floor(Math.random() * poi.length)];\n      if (!interests.includes(interest)) {\n        interests.push(interest);\n      }\n    }\n\n    return interests;\n  }\n}\n\nexport const planetGenerator = new PlanetGenerator();\n","size_bytes":6195},"server/generators/recipeGenerator.ts":{"content":"interface Recipe {\n  name: string;\n  type: 'weapon' | 'component' | 'upgrade' | 'consumable' | 'material';\n  materials: Array<{ name: string; quantity: number }>;\n  result: { name: string; quantity: number; stats?: any };\n  level: number;\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n  craftingTime: number; // in minutes\n  description: string;\n  category: string;\n}\n\nclass RecipeGenerator {\n  private readonly materialTypes = {\n    basic: ['Iron Ore', 'Silicon', 'Carbon Fiber', 'Aluminum', 'Copper Wire'],\n    advanced: ['Titanium Alloy', 'Quantum Steel', 'Plasma Conduit', 'Neural Fiber', 'Energy Cell'],\n    rare: ['Nexium Crystal', 'Dark Matter', 'Temporal Crystal', 'Void Essence', 'Quantum Matrix'],\n    exotic: ['Living Metal', 'Consciousness Core', 'Reality Shard', 'Infinity Particle', 'Dimensional Anchor']\n  };\n\n  private readonly weaponComponents = [\n    'Barrel', 'Trigger Assembly', 'Power Core', 'Targeting System', 'Ammunition Feed',\n    'Cooling System', 'Stabilizer', 'Charge Capacitor', 'Beam Focuser', 'Projectile Chamber'\n  ];\n\n  private readonly weaponTypes = [\n    'Laser Rifle', 'Plasma Cannon', 'Ion Blaster', 'Quantum Disruptor', 'Particle Beam',\n    'Photon Torpedo', 'Energy Lance', 'Pulse Rifle', 'Gravity Gun', 'Molecular Disassembler'\n  ];\n\n  private readonly componentTypes = [\n    'Shield Generator', 'Engine Booster', 'Sensor Array', 'Life Support Module',\n    'Navigation Computer', 'Communication Array', 'Power Regulator', 'Hull Plating',\n    'Magnetic Field Generator', 'Quantum Processor'\n  ];\n\n  private readonly upgradeTypes = [\n    'Armor Plating', 'Speed Enhancement', 'Weapon Modification', 'Sensor Upgrade',\n    'Engine Tuning', 'Shield Booster', 'Cargo Expansion', 'Stealth Module',\n    'Tactical Computer', 'Emergency Systems'\n  ];\n\n  generate(type?: string, level?: number, rarity?: string): Recipe {\n    const recipeType = type as Recipe['type'] || this.getRandomType();\n    const recipeLevel = level || Math.floor(Math.random() * 5) + 1;\n    const recipeRarity = rarity as Recipe['rarity'] || this.getRandomRarity();\n\n    switch (recipeType) {\n      case 'weapon':\n        return this.generateWeaponRecipe(recipeLevel, recipeRarity);\n      case 'component':\n        return this.generateComponentRecipe(recipeLevel, recipeRarity);\n      case 'upgrade':\n        return this.generateUpgradeRecipe(recipeLevel, recipeRarity);\n      case 'consumable':\n        return this.generateConsumableRecipe(recipeLevel, recipeRarity);\n      case 'material':\n        return this.generateMaterialRecipe(recipeLevel, recipeRarity);\n      default:\n        return this.generateWeaponRecipe(recipeLevel, recipeRarity);\n    }\n  }\n\n  private getRandomType(): Recipe['type'] {\n    const types: Recipe['type'][] = ['weapon', 'component', 'upgrade', 'consumable', 'material'];\n    return types[Math.floor(Math.random() * types.length)];\n  }\n\n  private getRandomRarity(): Recipe['rarity'] {\n    const rarities: Recipe['rarity'][] = ['common', 'uncommon', 'rare', 'epic', 'legendary'];\n    const weights = [0.4, 0.3, 0.2, 0.08, 0.02];\n    \n    const random = Math.random();\n    let total = 0;\n    for (let i = 0; i < weights.length; i++) {\n      total += weights[i];\n      if (random <= total) {\n        return rarities[i];\n      }\n    }\n    return 'common';\n  }\n\n  private generateWeaponRecipe(level: number, rarity: Recipe['rarity']): Recipe {\n    const weaponName = this.weaponTypes[Math.floor(Math.random() * this.weaponTypes.length)];\n    const materials = this.generateMaterials(level, rarity, 'weapon');\n    \n    const damage = this.calculateWeaponDamage(level, rarity);\n    const accuracy = Math.floor(Math.random() * 20) + 70; // 70-90% accuracy\n    const critChance = Math.floor(Math.random() * 15) + 5; // 5-20% crit chance\n\n    return {\n      name: `${rarity.charAt(0).toUpperCase() + rarity.slice(1)} ${weaponName}`,\n      type: 'weapon',\n      materials,\n      result: {\n        name: weaponName,\n        quantity: 1,\n        stats: {\n          damage,\n          accuracy,\n          critChance,\n          range: Math.floor(Math.random() * 500) + 200 // 200-700 range\n        }\n      },\n      level,\n      rarity,\n      craftingTime: this.calculateCraftingTime(rarity, 'weapon'),\n      description: `A ${rarity} grade ${weaponName.toLowerCase()} designed for space combat. Deals ${damage} damage with ${accuracy}% accuracy.`,\n      category: 'Weapons'\n    };\n  }\n\n  private generateComponentRecipe(level: number, rarity: Recipe['rarity']): Recipe {\n    const componentName = this.componentTypes[Math.floor(Math.random() * this.componentTypes.length)];\n    const materials = this.generateMaterials(level, rarity, 'component');\n    \n    const bonus = this.calculateComponentBonus(level, rarity);\n\n    return {\n      name: `${rarity.charAt(0).toUpperCase() + rarity.slice(1)} ${componentName}`,\n      type: 'component',\n      materials,\n      result: {\n        name: componentName,\n        quantity: 1,\n        stats: {\n          efficiency: bonus,\n          durability: Math.floor(Math.random() * 1000) + 500,\n          powerConsumption: Math.floor(Math.random() * 50) + 10\n        }\n      },\n      level,\n      rarity,\n      craftingTime: this.calculateCraftingTime(rarity, 'component'),\n      description: `A ${rarity} ${componentName.toLowerCase()} that provides ${bonus}% efficiency bonus to ship systems.`,\n      category: 'Ship Components'\n    };\n  }\n\n  private generateUpgradeRecipe(level: number, rarity: Recipe['rarity']): Recipe {\n    const upgradeName = this.upgradeTypes[Math.floor(Math.random() * this.upgradeTypes.length)];\n    const materials = this.generateMaterials(level, rarity, 'upgrade');\n    \n    const bonusValue = this.calculateUpgradeBonus(level, rarity);\n\n    return {\n      name: `${rarity.charAt(0).toUpperCase() + rarity.slice(1)} ${upgradeName}`,\n      type: 'upgrade',\n      materials,\n      result: {\n        name: upgradeName,\n        quantity: 1,\n        stats: {\n          bonusType: this.getUpgradeBonusType(upgradeName),\n          bonusValue,\n          installationCost: Math.floor(Math.random() * 1000) + 200\n        }\n      },\n      level,\n      rarity,\n      craftingTime: this.calculateCraftingTime(rarity, 'upgrade'),\n      description: `A ${rarity} upgrade module that enhances ship performance. Provides +${bonusValue} to relevant systems.`,\n      category: 'Ship Upgrades'\n    };\n  }\n\n  private generateConsumableRecipe(level: number, rarity: Recipe['rarity']): Recipe {\n    const consumables = [\n      'Repair Kit', 'Shield Battery', 'Energy Boost', 'Hull Sealant', 'System Stabilizer',\n      'Emergency Oxygen', 'Nano-repair Swarm', 'Power Cell', 'Medical Kit', 'Fuel Injector'\n    ];\n    \n    const consumableName = consumables[Math.floor(Math.random() * consumables.length)];\n    const materials = this.generateMaterials(level, rarity, 'consumable');\n    \n    const quantity = Math.floor(Math.random() * 5) + 1; // 1-5 items per craft\n    const effectValue = this.calculateConsumableEffect(level, rarity);\n\n    return {\n      name: `${rarity.charAt(0).toUpperCase() + rarity.slice(1)} ${consumableName}`,\n      type: 'consumable',\n      materials,\n      result: {\n        name: consumableName,\n        quantity,\n        stats: {\n          effect: this.getConsumableEffect(consumableName),\n          value: effectValue,\n          uses: 1\n        }\n      },\n      level,\n      rarity,\n      craftingTime: this.calculateCraftingTime(rarity, 'consumable'),\n      description: `A ${rarity} ${consumableName.toLowerCase()} that provides ${effectValue} points of restoration when used.`,\n      category: 'Consumables'\n    };\n  }\n\n  private generateMaterialRecipe(level: number, rarity: Recipe['rarity']): Recipe {\n    const materialName = `Processed ${rarity.charAt(0).toUpperCase() + rarity.slice(1)} Alloy`;\n    const rawMaterials = this.generateRawMaterials(level, rarity);\n    \n    const quantity = Math.floor(Math.random() * 3) + 1; // 1-3 processed materials\n\n    return {\n      name: materialName,\n      type: 'material',\n      materials: rawMaterials,\n      result: {\n        name: materialName,\n        quantity,\n        stats: {\n          purity: Math.floor(Math.random() * 20) + 80, // 80-100% purity\n          marketValue: this.calculateMaterialValue(level, rarity)\n        }\n      },\n      level,\n      rarity,\n      craftingTime: this.calculateCraftingTime(rarity, 'material'),\n      description: `A refined ${rarity} alloy suitable for advanced crafting projects. Higher purity materials yield better results.`,\n      category: 'Refined Materials'\n    };\n  }\n\n  private generateMaterials(level: number, rarity: Recipe['rarity'], recipeType: string): Array<{ name: string; quantity: number }> {\n    const materials: Array<{ name: string; quantity: number }> = [];\n    \n    // Base materials needed\n    const numMaterials = Math.min(6, Math.floor(level / 2) + 2 + (rarity === 'legendary' ? 2 : 0));\n    \n    // Add basic materials\n    const basicMaterial = this.materialTypes.basic[Math.floor(Math.random() * this.materialTypes.basic.length)];\n    materials.push({ name: basicMaterial, quantity: Math.floor(Math.random() * 5) + 1 });\n    \n    // Add materials based on level and rarity\n    if (level >= 2) {\n      const advancedMaterial = this.materialTypes.advanced[Math.floor(Math.random() * this.materialTypes.advanced.length)];\n      materials.push({ name: advancedMaterial, quantity: Math.floor(Math.random() * 3) + 1 });\n    }\n    \n    if (level >= 3 || ['rare', 'epic', 'legendary'].includes(rarity)) {\n      const rareMaterial = this.materialTypes.rare[Math.floor(Math.random() * this.materialTypes.rare.length)];\n      materials.push({ name: rareMaterial, quantity: Math.floor(Math.random() * 2) + 1 });\n    }\n    \n    if (rarity === 'legendary') {\n      const exoticMaterial = this.materialTypes.exotic[Math.floor(Math.random() * this.materialTypes.exotic.length)];\n      materials.push({ name: exoticMaterial, quantity: 1 });\n    }\n    \n    // Add specific components for weapons\n    if (recipeType === 'weapon') {\n      const component = this.weaponComponents[Math.floor(Math.random() * this.weaponComponents.length)];\n      materials.push({ name: component, quantity: 1 });\n    }\n    \n    return materials;\n  }\n\n  private generateRawMaterials(level: number, rarity: Recipe['rarity']): Array<{ name: string; quantity: number }> {\n    const materials: Array<{ name: string; quantity: number }> = [];\n    \n    // More raw materials needed for processing\n    const quantity = Math.floor(Math.random() * 10) + 5; // 5-15 raw materials\n    \n    let materialPool = this.materialTypes.basic;\n    if (rarity === 'uncommon' || rarity === 'rare') materialPool = this.materialTypes.advanced;\n    if (rarity === 'epic' || rarity === 'legendary') materialPool = this.materialTypes.rare;\n    \n    const material = materialPool[Math.floor(Math.random() * materialPool.length)];\n    materials.push({ name: `Raw ${material}`, quantity });\n    \n    return materials;\n  }\n\n  private calculateWeaponDamage(level: number, rarity: Recipe['rarity']): number {\n    const baseRarityMultipliers = {\n      'common': 1.0,\n      'uncommon': 1.2,\n      'rare': 1.5,\n      'epic': 1.8,\n      'legendary': 2.2\n    };\n    \n    const baseDamage = 50;\n    const levelMultiplier = 1 + (level - 1) * 0.2;\n    const rarityMultiplier = baseRarityMultipliers[rarity];\n    \n    return Math.floor(baseDamage * levelMultiplier * rarityMultiplier);\n  }\n\n  private calculateComponentBonus(level: number, rarity: Recipe['rarity']): number {\n    const baseRarityBonus = {\n      'common': 5,\n      'uncommon': 10,\n      'rare': 20,\n      'epic': 35,\n      'legendary': 50\n    };\n    \n    return baseRarityBonus[rarity] + (level - 1) * 5;\n  }\n\n  private calculateUpgradeBonus(level: number, rarity: Recipe['rarity']): number {\n    const baseRarityBonus = {\n      'common': 10,\n      'uncommon': 20,\n      'rare': 35,\n      'epic': 55,\n      'legendary': 80\n    };\n    \n    return baseRarityBonus[rarity] + (level - 1) * 10;\n  }\n\n  private calculateConsumableEffect(level: number, rarity: Recipe['rarity']): number {\n    const baseRarityEffect = {\n      'common': 50,\n      'uncommon': 100,\n      'rare': 200,\n      'epic': 350,\n      'legendary': 500\n    };\n    \n    return baseRarityEffect[rarity] + (level - 1) * 25;\n  }\n\n  private calculateMaterialValue(level: number, rarity: Recipe['rarity']): number {\n    const baseRarityValue = {\n      'common': 25,\n      'uncommon': 75,\n      'rare': 200,\n      'epic': 500,\n      'legendary': 1000\n    };\n    \n    return baseRarityValue[rarity] + (level - 1) * 50;\n  }\n\n  private calculateCraftingTime(rarity: Recipe['rarity'], type: string): number {\n    const baseTime = {\n      'common': 5,\n      'uncommon': 15,\n      'rare': 30,\n      'epic': 60,\n      'legendary': 120\n    };\n    \n    const typeMultiplier = {\n      'weapon': 1.5,\n      'component': 1.2,\n      'upgrade': 1.0,\n      'consumable': 0.5,\n      'material': 0.8\n    };\n    \n    return Math.floor(baseTime[rarity] * typeMultiplier[type as keyof typeof typeMultiplier]);\n  }\n\n  private getUpgradeBonusType(upgradeName: string): string {\n    const bonusMapping: { [key: string]: string } = {\n      'Armor Plating': 'health',\n      'Speed Enhancement': 'speed',\n      'Weapon Modification': 'damage',\n      'Sensor Upgrade': 'sensors',\n      'Engine Tuning': 'speed',\n      'Shield Booster': 'shields',\n      'Cargo Expansion': 'cargo',\n      'Stealth Module': 'stealth',\n      'Tactical Computer': 'accuracy',\n      'Emergency Systems': 'survival'\n    };\n    \n    return bonusMapping[upgradeName] || 'general';\n  }\n\n  private getConsumableEffect(consumableName: string): string {\n    const effectMapping: { [key: string]: string } = {\n      'Repair Kit': 'hull_repair',\n      'Shield Battery': 'shield_restore',\n      'Energy Boost': 'energy_restore',\n      'Hull Sealant': 'emergency_repair',\n      'System Stabilizer': 'system_repair',\n      'Emergency Oxygen': 'life_support',\n      'Nano-repair Swarm': 'auto_repair',\n      'Power Cell': 'power_boost',\n      'Medical Kit': 'crew_heal',\n      'Fuel Injector': 'fuel_efficiency'\n    };\n    \n    return effectMapping[consumableName] || 'general_boost';\n  }\n\n  generateRecipeBook(level: number = 1): Recipe[] {\n    const recipes: Recipe[] = [];\n    const types: Recipe['type'][] = ['weapon', 'component', 'upgrade', 'consumable', 'material'];\n    \n    types.forEach(type => {\n      for (let i = 1; i <= Math.min(level, 5); i++) {\n        const numRecipes = type === 'weapon' ? 3 : 2;\n        for (let j = 0; j < numRecipes; j++) {\n          recipes.push(this.generate(type, i));\n        }\n      }\n    });\n    \n    return recipes.sort((a, b) => {\n      if (a.level !== b.level) return a.level - b.level;\n      return a.name.localeCompare(b.name);\n    });\n  }\n}\n\nexport const recipeGenerator = new RecipeGenerator();\n","size_bytes":14847},"server/services/combatSystem.ts":{"content":"import { storage } from '../storage';\nimport { gameEngine } from './gameEngine';\nimport { contentGenerator } from '../generators/contentGenerator';\nimport { rewardCalculator } from '../utils/rewardCalculator';\n\ninterface CombatResult {\n  winner: string;\n  attackerDamage: number;\n  defenderDamage: number;\n  rewards: Array<{ type: string; name: string; quantity: number; value: number }>;\n  experience: number;\n}\n\nclass CombatSystem {\n  async pveCompat(userId: string, enemyType: string = 'random') {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const ships = await storage.getUserShips(userId);\n    const activeShip = ships.find(ship => ship.isActive);\n    if (!activeShip) {\n      throw new Error('No active ship found');\n    }\n\n    const enemy = contentGenerator.generateEnemy(enemyType, user.level);\n    const result = this.simulateCombat(activeShip, enemy);\n\n    // Calculate rewards based on victory\n    const rewards = result.winner === 'player' ? \n      rewardCalculator.calculateCombatRewards(enemy.difficulty, user.level) : [];\n\n    // Apply ship damage\n    const newHealth = Math.max(0, activeShip.health - result.defenderDamage);\n    await storage.updateShip(activeShip.id, { health: newHealth });\n\n    // Award experience and rewards\n    await gameEngine.gainExperience(userId, result.experience);\n    \n    if (rewards.length > 0) {\n      for (const reward of rewards) {\n        if (reward.type === 'credits') {\n          await storage.updateUser(userId, { \n            credits: user.credits + reward.value \n          });\n        } else if (reward.type === 'nexium') {\n          await storage.updateUser(userId, { \n            nexium: user.nexium + reward.quantity \n          });\n        } else {\n          await storage.addResource({\n            userId,\n            name: reward.name,\n            type: reward.type,\n            quantity: reward.quantity,\n            rarity: this.determineRarity(reward.value),\n            value: reward.value\n          });\n        }\n      }\n    }\n\n    // Log combat\n    const combatLog = await storage.addCombatLog({\n      attackerId: userId,\n      defenderId: null,\n      type: 'pve',\n      result: {\n        winner: result.winner === 'player' ? userId : 'enemy',\n        attackerDamage: result.attackerDamage,\n        defenderDamage: result.defenderDamage,\n        rewards,\n        experience: result.experience\n      }\n    });\n\n    return {\n      success: result.winner === 'player',\n      enemy: enemy.name,\n      result: combatLog.result,\n      shipHealth: newHealth\n    };\n  }\n\n  async pvpCombat(attackerId: string, defenderId: string) {\n    if (attackerId === defenderId) {\n      throw new Error('Cannot attack yourself');\n    }\n\n    const attacker = await storage.getUser(attackerId);\n    const defender = await storage.getUser(defenderId);\n    \n    if (!attacker || !defender) {\n      throw new Error('One or both users not found');\n    }\n\n    const attackerShips = await storage.getUserShips(attackerId);\n    const defenderShips = await storage.getUserShips(defenderId);\n\n    const attackerShip = attackerShips.find(ship => ship.isActive);\n    const defenderShip = defenderShips.find(ship => ship.isActive);\n\n    if (!attackerShip || !defenderShip) {\n      throw new Error('One or both players do not have an active ship');\n    }\n\n    const result = this.simulatePlayerCombat(attackerShip, defenderShip);\n    \n    // Apply damage to both ships\n    const attackerNewHealth = Math.max(0, attackerShip.health - result.attackerDamageReceived);\n    const defenderNewHealth = Math.max(0, defenderShip.health - result.defenderDamageReceived);\n\n    await storage.updateShip(attackerShip.id, { health: attackerNewHealth });\n    await storage.updateShip(defenderShip.id, { health: defenderNewHealth });\n\n    // Award experience to both players\n    const winnerExp = 150;\n    const loserExp = 50;\n    \n    if (result.winner === 'attacker') {\n      await gameEngine.gainExperience(attackerId, winnerExp);\n      await gameEngine.gainExperience(defenderId, loserExp);\n    } else {\n      await gameEngine.gainExperience(attackerId, loserExp);\n      await gameEngine.gainExperience(defenderId, winnerExp);\n    }\n\n    // Log combat\n    const combatLog = await storage.addCombatLog({\n      attackerId,\n      defenderId,\n      type: 'pvp',\n      result: {\n        winner: result.winner === 'attacker' ? attackerId : defenderId,\n        attackerDamage: result.attackerDamageDealt,\n        defenderDamage: result.defenderDamageDealt,\n        rewards: [],\n        experience: result.winner === 'attacker' ? winnerExp : loserExp\n      }\n    });\n\n    return {\n      winner: result.winner,\n      attackerShipHealth: attackerNewHealth,\n      defenderShipHealth: defenderNewHealth,\n      result: combatLog.result\n    };\n  }\n\n  private simulateCombat(playerShip: any, enemy: any) {\n    const playerPower = this.calculateShipPower(playerShip);\n    const enemyPower = enemy.power;\n\n    // Combat simulation with randomness\n    const playerRoll = Math.random() * playerPower;\n    const enemyRoll = Math.random() * enemyPower;\n\n    const attackerDamage = Math.floor(playerRoll * 0.3 + playerShip.weapons * 10);\n    const defenderDamage = Math.floor(enemyRoll * 0.2 + enemy.weapons * 8);\n\n    const winner = playerRoll > enemyRoll ? 'player' : 'enemy';\n    const experience = Math.floor(enemy.difficulty * 25 + (winner === 'player' ? 50 : 25));\n\n    return {\n      winner,\n      attackerDamage,\n      defenderDamage,\n      experience\n    };\n  }\n\n  private simulatePlayerCombat(attackerShip: any, defenderShip: any) {\n    const attackerPower = this.calculateShipPower(attackerShip);\n    const defenderPower = this.calculateShipPower(defenderShip);\n\n    // PvP combat simulation\n    const attackerRoll = Math.random() * attackerPower;\n    const defenderRoll = Math.random() * defenderPower;\n\n    const attackerDamageDealt = Math.floor(attackerRoll * 0.25 + attackerShip.weapons * 12);\n    const defenderDamageDealt = Math.floor(defenderRoll * 0.25 + defenderShip.weapons * 12);\n\n    // Counter-damage based on ship stats\n    const attackerDamageReceived = Math.floor(defenderDamageDealt * (1 - attackerShip.speed / 200));\n    const defenderDamageReceived = Math.floor(attackerDamageDealt * (1 - defenderShip.speed / 200));\n\n    const winner = attackerRoll > defenderRoll ? 'attacker' : 'defender';\n\n    return {\n      winner,\n      attackerDamageDealt,\n      defenderDamageDealt,\n      attackerDamageReceived,\n      defenderDamageReceived\n    };\n  }\n\n  private calculateShipPower(ship: any): number {\n    return ship.health + ship.speed + ship.weapons * 20 + ship.sensors;\n  }\n\n  private determineRarity(value: number): string {\n    if (value < 10) return 'common';\n    if (value < 50) return 'uncommon';\n    if (value < 200) return 'rare';\n    if (value < 500) return 'epic';\n    return 'legendary';\n  }\n}\n\nexport const combatSystem = new CombatSystem();\n","size_bytes":6951},"server/services/economySystem.ts":{"content":"import { storage } from '../storage';\nimport { contentGenerator } from '../generators/contentGenerator';\n\ninterface MarketItem {\n  name: string;\n  type: string;\n  price: number;\n  availability: number;\n  rarity: string;\n  description: string;\n}\n\nclass EconomySystem {\n  private marketItems: MarketItem[] = [];\n  private lastMarketUpdate: number = 0;\n  private readonly MARKET_UPDATE_INTERVAL = 3600000; // 1 hour\n\n  constructor() {\n    this.initializeMarket();\n  }\n\n  private initializeMarket() {\n    this.marketItems = [\n      {\n        name: 'Quantum Core',\n        type: 'component',\n        price: 2500,\n        availability: 10,\n        rarity: 'rare',\n        description: 'Advanced quantum processing unit'\n      },\n      {\n        name: 'Nexium Crystal',\n        type: 'material',\n        price: 180,\n        availability: 50,\n        rarity: 'uncommon',\n        description: 'Raw nexium crystal ore'\n      },\n      {\n        name: 'Plasma Cannon',\n        type: 'weapon',\n        price: 5000,\n        availability: 5,\n        rarity: 'epic',\n        description: 'High-energy plasma weapon system'\n      },\n      {\n        name: 'Shield Generator',\n        type: 'component',\n        price: 3200,\n        availability: 8,\n        rarity: 'rare',\n        description: 'Deflector shield technology'\n      },\n      {\n        name: 'Hyperspace Fuel',\n        type: 'material',\n        price: 75,\n        availability: 100,\n        rarity: 'common',\n        description: 'Standard hyperspace travel fuel'\n      }\n    ];\n    this.lastMarketUpdate = Date.now();\n  }\n\n  async getMarketItems(): Promise<MarketItem[]> {\n    // Update market prices periodically\n    if (Date.now() - this.lastMarketUpdate > this.MARKET_UPDATE_INTERVAL) {\n      this.updateMarketPrices();\n    }\n    return this.marketItems;\n  }\n\n  private updateMarketPrices() {\n    this.marketItems.forEach(item => {\n      // Fluctuate prices by ±15%\n      const fluctuation = (Math.random() - 0.5) * 0.3;\n      item.price = Math.floor(item.price * (1 + fluctuation));\n      \n      // Update availability\n      item.availability = Math.max(0, item.availability + Math.floor(Math.random() * 10) - 5);\n    });\n    this.lastMarketUpdate = Date.now();\n  }\n\n  async buyItem(userId: string, itemName: string, quantity: number) {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const item = this.marketItems.find(i => i.name === itemName);\n    if (!item) {\n      throw new Error('Item not found in market');\n    }\n\n    if (item.availability < quantity) {\n      throw new Error('Insufficient item availability');\n    }\n\n    const totalCost = item.price * quantity;\n    if (user.credits < totalCost) {\n      throw new Error('Insufficient credits');\n    }\n\n    // Deduct credits\n    await storage.updateUser(userId, {\n      credits: user.credits - totalCost\n    });\n\n    // Add item to user inventory\n    await storage.addResource({\n      userId,\n      name: item.name,\n      type: item.type,\n      quantity,\n      rarity: item.rarity,\n      value: item.price\n    });\n\n    // Update market availability\n    item.availability -= quantity;\n\n    // Log transaction\n    await storage.addMarketTransaction({\n      sellerId: null, // NPC transaction\n      buyerId: userId,\n      itemType: item.type,\n      itemName: item.name,\n      quantity,\n      pricePerUnit: item.price,\n      totalPrice: totalCost\n    });\n\n    return {\n      success: true,\n      item: item.name,\n      quantity,\n      totalCost,\n      remainingCredits: user.credits - totalCost\n    };\n  }\n\n  async sellResource(userId: string, resourceId: string, quantity: number, pricePerUnit: number) {\n    const resource = await storage.getUserResources(userId);\n    const targetResource = resource.find(r => r.id === resourceId);\n    \n    if (!targetResource) {\n      throw new Error('Resource not found');\n    }\n\n    if (targetResource.quantity < quantity) {\n      throw new Error('Insufficient resource quantity');\n    }\n\n    const totalIncome = pricePerUnit * quantity;\n\n    // Update user credits\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    await storage.updateUser(userId, {\n      credits: user.credits + totalIncome\n    });\n\n    // Update or remove resource\n    if (targetResource.quantity === quantity) {\n      await storage.removeResource(resourceId);\n    } else {\n      await storage.updateResource(resourceId, {\n        quantity: targetResource.quantity - quantity\n      });\n    }\n\n    // Log transaction\n    await storage.addMarketTransaction({\n      sellerId: userId,\n      buyerId: userId, // Player-to-market sale\n      itemType: targetResource.type,\n      itemName: targetResource.name,\n      quantity,\n      pricePerUnit,\n      totalPrice: totalIncome\n    });\n\n    // Update user stats\n    await storage.updateUser(userId, {\n      stats: {\n        ...user.stats,\n        trades: user.stats.trades + 1\n      }\n    });\n\n    return {\n      success: true,\n      resourceSold: targetResource.name,\n      quantitySold: quantity,\n      income: totalIncome,\n      newCredits: user.credits + totalIncome\n    };\n  }\n\n  async craftItem(userId: string, recipeId: string) {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const recipes = await storage.getAllRecipes();\n    const recipe = recipes.find(r => r.id === recipeId);\n    if (!recipe) {\n      throw new Error('Recipe not found');\n    }\n\n    const userResources = await storage.getUserResources(userId);\n\n    // Check if user has all required materials\n    const materialCheck = recipe.materials?.every(material => {\n      const userMaterial = userResources.find(r => r.name === material.name);\n      return userMaterial && userMaterial.quantity >= material.quantity;\n    });\n\n    if (!materialCheck) {\n      throw new Error('Insufficient materials for crafting');\n    }\n\n    // Consume materials\n    if (recipe.materials) {\n      for (const material of recipe.materials) {\n        const userMaterial = userResources.find(r => r.name === material.name);\n        if (userMaterial) {\n          if (userMaterial.quantity === material.quantity) {\n            await storage.removeResource(userMaterial.id);\n          } else {\n            await storage.updateResource(userMaterial.id, {\n              quantity: userMaterial.quantity - material.quantity\n            });\n          }\n        }\n      }\n    }\n\n    // Create result item\n    if (recipe.result) {\n      await storage.addResource({\n        userId,\n        name: recipe.result.name,\n        type: recipe.type,\n        quantity: recipe.result.quantity,\n        rarity: recipe.rarity,\n        value: this.calculateCraftedItemValue(recipe)\n      });\n    }\n\n    return {\n      success: true,\n      crafted: recipe.result?.name,\n      quantity: recipe.result?.quantity\n    };\n  }\n\n  private calculateCraftedItemValue(recipe: any): number {\n    const baseValue = {\n      common: 50,\n      uncommon: 150,\n      rare: 400,\n      epic: 800,\n      legendary: 1500\n    };\n    return baseValue[recipe.rarity as keyof typeof baseValue] || 100;\n  }\n\n  async getMarketHistory(limit: number = 20) {\n    return await storage.getMarketHistory(limit);\n  }\n\n  async generateDailyDeals(userLevel: number) {\n    return contentGenerator.generateDailyMarketDeals(userLevel);\n  }\n}\n\nexport const economySystem = new EconomySystem();\n","size_bytes":7441},"server/services/explorationSystem.ts":{"content":"import { storage } from '../storage';\nimport { gameEngine } from './gameEngine';\nimport { contentGenerator } from '../generators/contentGenerator';\nimport { rewardCalculator } from '../utils/rewardCalculator';\n\nclass ExplorationSystem {\n  async explore(userId: string, type: string, sector: string = 'auto') {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const ships = await storage.getUserShips(userId);\n    const activeShip = ships.find(ship => ship.isActive);\n    if (!activeShip) {\n      throw new Error('No active ship found');\n    }\n\n    // Generate sector if auto\n    if (sector === 'auto') {\n      sector = contentGenerator.generateSectorName();\n    }\n\n    const result = await this.performExploration(user, activeShip, type, sector);\n\n    // Award experience\n    await gameEngine.gainExperience(userId, result.experience);\n\n    // Update user stats\n    await storage.updateUser(userId, {\n      stats: {\n        ...user.stats,\n        exploration: user.stats.exploration + 1\n      }\n    });\n\n    // Add rewards to user inventory\n    if (result.rewards && result.rewards.length > 0) {\n      for (const reward of result.rewards) {\n        if (reward.type === 'credits') {\n          await storage.updateUser(userId, {\n            credits: user.credits + reward.value\n          });\n        } else if (reward.type === 'nexium') {\n          await storage.updateUser(userId, {\n            nexium: user.nexium + reward.quantity\n          });\n        } else {\n          await storage.addResource({\n            userId,\n            name: reward.name,\n            type: reward.type,\n            quantity: reward.quantity,\n            rarity: this.determineRarity(reward.value),\n            value: reward.value\n          });\n        }\n      }\n    }\n\n    // Log exploration\n    const exploration = await storage.addExploration({\n      userId,\n      sector,\n      type,\n      result\n    });\n\n    return exploration;\n  }\n\n  private async performExploration(user: any, ship: any, type: string, sector: string) {\n    const shipBonus = this.calculateShipBonus(ship, type);\n    const levelBonus = user.level * 0.1;\n    const baseSuccessRate = this.getBaseSuccessRate(type);\n    \n    const finalSuccessRate = Math.min(0.95, baseSuccessRate + shipBonus + levelBonus);\n    const success = Math.random() < finalSuccessRate;\n\n    const experience = this.calculateExperience(type, success, user.level);\n    let rewards: any[] = [];\n\n    if (success) {\n      rewards = rewardCalculator.calculateExplorationRewards(type, user.level, ship.sensors);\n    } else {\n      // Consolation rewards for failed exploration\n      rewards = [{\n        type: 'credits',\n        name: 'Salvage',\n        quantity: 1,\n        value: Math.floor(Math.random() * 20) + 10\n      }];\n    }\n\n    return {\n      success,\n      rewards,\n      experience,\n      shipBonus,\n      sectorData: contentGenerator.generateSectorData(sector)\n    };\n  }\n\n  private calculateShipBonus(ship: any, type: string): number {\n    switch (type) {\n      case 'exploration':\n        return ship.sensors * 0.001; // Sensors help with exploration\n      case 'hunting':\n        return ship.weapons * 0.002; // Weapons help with hunting\n      case 'artifact_search':\n        return (ship.sensors + ship.cargo) * 0.0015; // Sensors and cargo help\n      case 'fishing':\n        return ship.speed * 0.001; // Speed helps with fishing\n      default:\n        return 0;\n    }\n  }\n\n  private getBaseSuccessRate(type: string): number {\n    const baseRates = {\n      exploration: 0.7,\n      hunting: 0.6,\n      artifact_search: 0.4,\n      fishing: 0.8\n    };\n    return baseRates[type as keyof typeof baseRates] || 0.5;\n  }\n\n  private calculateExperience(type: string, success: boolean, userLevel: number): number {\n    const baseExp = {\n      exploration: 30,\n      hunting: 40,\n      artifact_search: 60,\n      fishing: 20\n    };\n\n    const exp = baseExp[type as keyof typeof baseExp] || 25;\n    const multiplier = success ? 1.5 : 0.5;\n    const levelBonus = userLevel * 2;\n\n    return Math.floor(exp * multiplier + levelBonus);\n  }\n\n  private determineRarity(value: number): string {\n    if (value < 20) return 'common';\n    if (value < 100) return 'uncommon';\n    if (value < 300) return 'rare';\n    if (value < 700) return 'epic';\n    return 'legendary';\n  }\n\n  async getExplorationHistory(userId: string, limit: number = 10) {\n    return await storage.getUserExplorations(userId, limit);\n  }\n\n  async getAvailableSectors(userLevel: number) {\n    return contentGenerator.generateAvailableSectors(userLevel);\n  }\n}\n\nexport const explorationSystem = new ExplorationSystem();\n","size_bytes":4675},"server/services/gameEngine.ts":{"content":"import { storage } from '../storage';\nimport { InsertUser, InsertShip } from '@shared/schema';\nimport { contentGenerator } from '../generators/contentGenerator';\nimport { rewardCalculator } from '../utils/rewardCalculator';\n\n// Ship tier configurations from the attached file\nconst SHIP_CONFIGS = {\n  scout: {\n    1: { variant: 'Swiftwing', health: 100, speed: 80, cargo: 20, weapons: 1, sensors: 60, cost: 0 },\n    2: { variant: 'Spectre', health: 120, speed: 90, cargo: 25, weapons: 1, sensors: 70, cost: 500, nexium: 10 },\n    3: { variant: 'Phantom', health: 140, speed: 100, cargo: 30, weapons: 2, sensors: 80, cost: 1200, nexium: 25 },\n    4: { variant: 'Celestial Whisper', health: 160, speed: 110, cargo: 35, weapons: 2, sensors: 90, cost: 2500, nexium: 50 }\n  },\n  fighter: {\n    1: { variant: 'Vindicator', health: 150, speed: 70, cargo: 15, weapons: 3, sensors: 40, cost: 0 },\n    2: { variant: 'Gladiator', health: 180, speed: 75, cargo: 18, weapons: 4, sensors: 45, cost: 600, nexium: 15 },\n    3: { variant: 'Annihilator', health: 210, speed: 80, cargo: 21, weapons: 5, sensors: 50, cost: 1400, nexium: 30 },\n    4: { variant: 'Dominator', health: 240, speed: 85, cargo: 24, weapons: 6, sensors: 55, cost: 3000, nexium: 60 }\n  },\n  freighter: {\n    1: { variant: 'Hauler', health: 200, speed: 50, cargo: 100, weapons: 1, sensors: 30, cost: 0 },\n    2: { variant: 'Bulkhead', health: 240, speed: 55, cargo: 125, weapons: 1, sensors: 35, cost: 700, nexium: 20 },\n    3: { variant: 'Citadel', health: 280, speed: 60, cargo: 150, weapons: 2, sensors: 40, cost: 1600, nexium: 35 },\n    4: { variant: 'Goliath', health: 320, speed: 65, cargo: 175, weapons: 2, sensors: 45, cost: 3500, nexium: 70 }\n  },\n  explorer: {\n    1: { variant: 'Pathfinder', health: 120, speed: 60, cargo: 40, weapons: 2, sensors: 80, cost: 0 },\n    2: { variant: 'Horizon Seeker', health: 140, speed: 65, cargo: 50, weapons: 2, sensors: 90, cost: 550, nexium: 12 },\n    3: { variant: 'Nebula Navigator', health: 160, speed: 70, cargo: 60, weapons: 3, sensors: 100, cost: 1300, nexium: 28 },\n    4: { variant: 'Event Horizon', health: 180, speed: 75, cargo: 70, weapons: 3, sensors: 110, cost: 2800, nexium: 55 }\n  },\n  battlecruiser: {\n    1: { variant: 'Warden', health: 300, speed: 40, cargo: 30, weapons: 5, sensors: 50, cost: 0 },\n    2: { variant: 'Juggernaut', health: 360, speed: 42, cargo: 35, weapons: 6, sensors: 55, cost: 800, nexium: 18 },\n    3: { variant: 'Dreadnought', health: 420, speed: 44, cargo: 40, weapons: 7, sensors: 60, cost: 1800, nexium: 40 },\n    4: { variant: 'Behemoth', health: 480, speed: 46, cargo: 45, weapons: 8, sensors: 65, cost: 4000, nexium: 80 }\n  },\n  flagship: {\n    1: { variant: 'Sovereign', health: 250, speed: 55, cargo: 50, weapons: 4, sensors: 70, cost: 0 },\n    2: { variant: 'Paragon', health: 300, speed: 58, cargo: 60, weapons: 5, sensors: 75, cost: 750, nexium: 16 },\n    3: { variant: 'Leviathan', health: 350, speed: 61, cargo: 70, weapons: 6, sensors: 80, cost: 1700, nexium: 38 },\n    4: { variant: 'Imperator', health: 400, speed: 64, cargo: 80, weapons: 7, sensors: 85, cost: 3800, nexium: 75 }\n  }\n};\n\nclass GameEngine {\n  async registerUser(userData: InsertUser) {\n    const user = await storage.createUser(userData);\n    \n    // Create starting ship (Swiftwing Scout)\n    const startingShip = await this.createStartingShip(user.id);\n    \n    // Set the starting ship as active\n    await storage.setActiveShip(user.id, startingShip.id);\n    \n    // Add starting resources\n    await this.giveStartingResources(user.id);\n    \n    return user;\n  }\n\n  private async createStartingShip(userId: string): Promise<any> {\n    const shipConfig = SHIP_CONFIGS.scout[1];\n    \n    const shipData: InsertShip = {\n      userId,\n      name: `${shipConfig.variant}-${Math.random().toString(36).substr(2, 4)}`,\n      type: 'scout',\n      tier: 1,\n      variant: shipConfig.variant,\n      health: shipConfig.health,\n      maxHealth: shipConfig.health,\n      speed: shipConfig.speed,\n      cargo: shipConfig.cargo,\n      weapons: shipConfig.weapons,\n      sensors: shipConfig.sensors,\n      isActive: true\n    };\n\n    return await storage.createShip(shipData);\n  }\n\n  private async giveStartingResources(userId: string) {\n    const startingResources = [\n      { name: 'Iron Ore', type: 'material', quantity: 10, rarity: 'common', value: 5 },\n      { name: 'Energy Cell', type: 'component', quantity: 5, rarity: 'common', value: 15 },\n      { name: 'Basic Alloy', type: 'material', quantity: 3, rarity: 'uncommon', value: 25 }\n    ];\n\n    for (const resource of startingResources) {\n      await storage.addResource({\n        userId,\n        ...resource\n      });\n    }\n  }\n\n  async upgradeShip(userId: string, shipId: string) {\n    const ship = await storage.getShip(shipId);\n    if (!ship || ship.userId !== userId) {\n      throw new Error('Ship not found or not owned by user');\n    }\n\n    if (ship.tier >= 4) {\n      throw new Error('Ship is already at maximum tier');\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const shipType = ship.type as keyof typeof SHIP_CONFIGS;\n    const nextTier = (ship.tier + 1) as 1 | 2 | 3 | 4;\n    const upgradeConfig = SHIP_CONFIGS[shipType][nextTier];\n\n    // Check if user has enough resources\n    if (user.credits < upgradeConfig.cost) {\n      throw new Error('Insufficient credits');\n    }\n    if (user.nexium < upgradeConfig.nexium) {\n      throw new Error('Insufficient nexium crystals');\n    }\n\n    // Deduct resources\n    await storage.updateUser(userId, {\n      credits: user.credits - upgradeConfig.cost,\n      nexium: user.nexium - upgradeConfig.nexium\n    });\n\n    // Upgrade ship\n    const upgradedShip = await storage.updateShip(shipId, {\n      tier: nextTier,\n      variant: upgradeConfig.variant,\n      health: upgradeConfig.health,\n      maxHealth: upgradeConfig.health,\n      speed: upgradeConfig.speed,\n      cargo: upgradeConfig.cargo,\n      weapons: upgradeConfig.weapons,\n      sensors: upgradeConfig.sensors\n    });\n\n    return {\n      success: true,\n      ship: upgradedShip,\n      costPaid: { credits: upgradeConfig.cost, nexium: upgradeConfig.nexium }\n    };\n  }\n\n  async purchaseShip(userId: string, shipType: string) {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    if (!(shipType in SHIP_CONFIGS)) {\n      throw new Error('Invalid ship type');\n    }\n\n    const shipConfig = SHIP_CONFIGS[shipType as keyof typeof SHIP_CONFIGS][1];\n    const baseCost = this.getShipBaseCost(shipType);\n\n    if (user.credits < baseCost) {\n      throw new Error('Insufficient credits');\n    }\n\n    // Deduct cost\n    await storage.updateUser(userId, {\n      credits: user.credits - baseCost\n    });\n\n    // Create new ship\n    const shipData: InsertShip = {\n      userId,\n      name: `${shipConfig.variant}-${Math.random().toString(36).substr(2, 4)}`,\n      type: shipType,\n      tier: 1,\n      variant: shipConfig.variant,\n      health: shipConfig.health,\n      maxHealth: shipConfig.health,\n      speed: shipConfig.speed,\n      cargo: shipConfig.cargo,\n      weapons: shipConfig.weapons,\n      sensors: shipConfig.sensors,\n      isActive: false\n    };\n\n    const newShip = await storage.createShip(shipData);\n\n    return {\n      success: true,\n      ship: newShip,\n      costPaid: baseCost\n    };\n  }\n\n  private getShipBaseCost(shipType: string): number {\n    const baseCosts = {\n      scout: 0, // Free starting ship\n      fighter: 5000,\n      freighter: 8000,\n      explorer: 6000,\n      battlecruiser: 15000,\n      flagship: 25000\n    };\n    return baseCosts[shipType as keyof typeof baseCosts] || 1000;\n  }\n\n  async repairShip(userId: string, shipId: string) {\n    const ship = await storage.getShip(shipId);\n    if (!ship || ship.userId !== userId) {\n      throw new Error('Ship not found or not owned by user');\n    }\n\n    if (ship.health >= ship.maxHealth) {\n      throw new Error('Ship is already at full health');\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const repairCost = Math.floor((ship.maxHealth - ship.health) * 10);\n    \n    if (user.credits < repairCost) {\n      throw new Error('Insufficient credits for repair');\n    }\n\n    await storage.updateUser(userId, {\n      credits: user.credits - repairCost\n    });\n\n    const repairedShip = await storage.updateShip(shipId, {\n      health: ship.maxHealth\n    });\n\n    return {\n      success: true,\n      ship: repairedShip,\n      repairCost\n    };\n  }\n\n  async gainExperience(userId: string, amount: number) {\n    const user = await storage.getUser(userId);\n    if (!user) return;\n\n    const newExperience = user.experience + amount;\n    const newLevel = Math.floor(newExperience / 1000) + 1;\n    \n    const leveledUp = newLevel > user.level;\n\n    await storage.updateUser(userId, {\n      experience: newExperience,\n      level: newLevel\n    });\n\n    return {\n      experienceGained: amount,\n      newLevel,\n      leveledUp,\n      rewards: leveledUp ? rewardCalculator.calculateLevelUpRewards(newLevel) : []\n    };\n  }\n}\n\nexport const gameEngine = new GameEngine();\n","size_bytes":9229},"server/services/guildSystem.ts":{"content":"import { storage } from '../storage';\n\n// Default guild factions as mentioned in the requirements\nconst DEFAULT_GUILDS = [\n  {\n    name: 'Stellar Dominion',\n    type: 'military',\n    description: 'Military empire focused on combat and expansion',\n    leaderId: 'npc_dominion_leader'\n  },\n  {\n    name: 'Cosmic Traders',\n    type: 'trade',\n    description: 'Merchant guild specializing in commerce and trade routes',\n    leaderId: 'npc_trader_leader'\n  },\n  {\n    name: 'Void Explorers',\n    type: 'exploration',\n    description: 'Exploration society dedicated to discovering new worlds',\n    leaderId: 'npc_explorer_leader'\n  },\n  {\n    name: 'Nexus Researchers',\n    type: 'research',\n    description: 'Scientific organization advancing technology and knowledge',\n    leaderId: 'npc_researcher_leader'\n  }\n];\n\nclass GuildSystem {\n  async initializeDefaultGuilds() {\n    const existingGuilds = await storage.getAllGuilds();\n    \n    if (existingGuilds.length === 0) {\n      for (const guild of DEFAULT_GUILDS) {\n        await storage.createGuild({\n          name: guild.name,\n          type: guild.type,\n          description: guild.description,\n          level: 1,\n          experience: 0,\n          memberCount: 1, // NPC leader\n          maxMembers: 100,\n          leaderId: guild.leaderId\n        });\n      }\n    }\n  }\n\n  async joinGuild(userId: string, guildId: string) {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    if (user.guildId) {\n      return {\n        success: false,\n        error: 'You are already in a guild. Leave your current guild first.'\n      };\n    }\n\n    const guild = await storage.getGuild(guildId);\n    if (!guild) {\n      return {\n        success: false,\n        error: 'Guild not found'\n      };\n    }\n\n    if (guild.memberCount >= guild.maxMembers) {\n      return {\n        success: false,\n        error: 'Guild is full'\n      };\n    }\n\n    // Add user to guild\n    await storage.updateUser(userId, { guildId });\n    \n    // Update guild member count\n    await storage.updateGuild(guildId, {\n      memberCount: guild.memberCount + 1\n    });\n\n    return {\n      success: true,\n      guild,\n      message: `Welcome to ${guild.name}!`\n    };\n  }\n\n  async leaveGuild(userId: string) {\n    const user = await storage.getUser(userId);\n    if (!user || !user.guildId) {\n      throw new Error('User not in a guild');\n    }\n\n    const guild = await storage.getGuild(user.guildId);\n    if (guild) {\n      await storage.updateGuild(guild.id, {\n        memberCount: Math.max(1, guild.memberCount - 1) // Keep at least NPC leader\n      });\n    }\n\n    await storage.updateUser(userId, { guildId: null });\n\n    return {\n      success: true,\n      message: `You have left ${guild?.name}`\n    };\n  }\n\n  async contribute(userId: string, resourceType: string, amount: number) {\n    const user = await storage.getUser(userId);\n    if (!user || !user.guildId) {\n      throw new Error('User not in a guild');\n    }\n\n    const guild = await storage.getGuild(user.guildId);\n    if (!guild) {\n      throw new Error('Guild not found');\n    }\n\n    let contributionValue = 0;\n\n    if (resourceType === 'credits') {\n      if (user.credits < amount) {\n        throw new Error('Insufficient credits');\n      }\n      await storage.updateUser(userId, {\n        credits: user.credits - amount\n      });\n      contributionValue = amount;\n    } else if (resourceType === 'nexium') {\n      if (user.nexium < amount) {\n        throw new Error('Insufficient nexium');\n      }\n      await storage.updateUser(userId, {\n        nexium: user.nexium - amount\n      });\n      contributionValue = amount * 10; // Nexium is worth more\n    }\n\n    // Add experience to guild\n    const expGained = Math.floor(contributionValue / 10);\n    const newGuildExp = guild.experience + expGained;\n    const newGuildLevel = Math.floor(newGuildExp / 1000) + 1;\n\n    const leveledUp = newGuildLevel > guild.level;\n\n    await storage.updateGuild(guild.id, {\n      experience: newGuildExp,\n      level: newGuildLevel\n    });\n\n    // Award personal experience to contributor\n    if (user) {\n      const personalExp = Math.floor(expGained * 0.5);\n      const currentUserExp = user.experience + personalExp;\n      await storage.updateUser(userId, {\n        experience: currentUserExp\n      });\n    }\n\n    return {\n      success: true,\n      guildExpGained: expGained,\n      guildLeveledUp: leveledUp,\n      newGuildLevel,\n      personalExpGained: Math.floor(expGained * 0.5),\n      rewards: leveledUp ? this.calculateGuildLevelRewards(newGuildLevel) : []\n    };\n  }\n\n  private calculateGuildLevelRewards(level: number) {\n    const rewards = [];\n    \n    // Every 5 levels, increase max members\n    if (level % 5 === 0) {\n      rewards.push({\n        type: 'member_increase',\n        value: 25,\n        description: 'Guild member capacity increased by 25'\n      });\n    }\n\n    // Level-based rewards\n    if (level % 10 === 0) {\n      rewards.push({\n        type: 'credits',\n        value: level * 1000,\n        description: `${level * 1000} credits for all members`\n      });\n    }\n\n    return rewards;\n  }\n\n  async getGuildRankings() {\n    const guilds = await storage.getAllGuilds();\n    return guilds\n      .sort((a, b) => {\n        // Sort by level first, then by experience\n        if (b.level !== a.level) {\n          return b.level - a.level;\n        }\n        return b.experience - a.experience;\n      })\n      .map((guild, index) => ({\n        ...guild,\n        rank: index + 1\n      }));\n  }\n\n  async getGuildMembers(guildId: string) {\n    return await storage.getGuildMembers(guildId);\n  }\n\n  async getGuildVsGuildData() {\n    const rankings = await this.getGuildRankings();\n    \n    return rankings.map(guild => ({\n      id: guild.id,\n      name: guild.name,\n      type: guild.type,\n      level: guild.level,\n      memberCount: guild.memberCount,\n      rank: guild.rank,\n      power: this.calculateGuildPower(guild)\n    }));\n  }\n\n  private calculateGuildPower(guild: any): number {\n    return guild.level * 100 + guild.memberCount * 10 + guild.experience;\n  }\n\n  async scheduleGuildWar(guild1Id: string, guild2Id: string) {\n    // This would implement guild vs guild warfare\n    // For now, return a placeholder\n    return {\n      scheduled: true,\n      battleTime: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n      participants: [guild1Id, guild2Id]\n    };\n  }\n}\n\nexport const guildSystem = new GuildSystem();\n\n// Initialize default guilds on startup\nguildSystem.initializeDefaultGuilds().catch(console.error);\n","size_bytes":6578},"server/utils/rewardCalculator.ts":{"content":"interface Reward {\n  type: string;\n  name: string;\n  quantity: number;\n  value: number;\n}\n\nclass RewardCalculator {\n  calculateExplorationRewards(explorationType: string, userLevel: number, sensorPower: number): Reward[] {\n    const rewards: Reward[] = [];\n    const levelMultiplier = 1 + (userLevel - 1) * 0.1;\n    const sensorMultiplier = 1 + (sensorPower - 50) * 0.005; // Sensors above 50 provide bonus\n    \n    switch (explorationType) {\n      case 'exploration':\n        rewards.push(...this.generateExplorationRewards(levelMultiplier, sensorMultiplier));\n        break;\n      case 'hunting':\n        rewards.push(...this.generateHuntingRewards(levelMultiplier));\n        break;\n      case 'artifact_search':\n        rewards.push(...this.generateArtifactRewards(levelMultiplier, sensorMultiplier));\n        break;\n      case 'fishing':\n        rewards.push(...this.generateFishingRewards(levelMultiplier));\n        break;\n      default:\n        rewards.push(this.generateBasicReward(levelMultiplier));\n    }\n    \n    return rewards;\n  }\n\n  calculateCombatRewards(enemyDifficulty: number, userLevel: number): Reward[] {\n    const rewards: Reward[] = [];\n    const difficultyMultiplier = 1 + enemyDifficulty * 0.2;\n    const levelMultiplier = 1 + (userLevel - 1) * 0.05;\n    \n    // Always give credits\n    const creditReward = Math.floor((50 + Math.random() * 100) * difficultyMultiplier * levelMultiplier);\n    rewards.push({\n      type: 'credits',\n      name: 'Combat Pay',\n      quantity: 1,\n      value: creditReward\n    });\n    \n    // Chance for materials based on difficulty\n    const materialChance = Math.min(0.8, 0.3 + enemyDifficulty * 0.1);\n    if (Math.random() < materialChance) {\n      rewards.push(...this.generateCombatMaterials(difficultyMultiplier, levelMultiplier));\n    }\n    \n    // Rare chance for nexium\n    if (Math.random() < 0.2) {\n      const nexiumAmount = Math.floor((1 + Math.random() * 3) * difficultyMultiplier);\n      rewards.push({\n        type: 'nexium',\n        name: 'Nexium Crystal',\n        quantity: nexiumAmount,\n        value: nexiumAmount * 100\n      });\n    }\n    \n    return rewards;\n  }\n\n  calculateLevelUpRewards(level: number): Reward[] {\n    const rewards: Reward[] = [];\n    \n    // Credits reward\n    const creditAmount = level * 100 + Math.floor(Math.random() * level * 50);\n    rewards.push({\n      type: 'credits',\n      name: 'Level Up Bonus',\n      quantity: 1,\n      value: creditAmount\n    });\n    \n    // Nexium every 5 levels\n    if (level % 5 === 0) {\n      const nexiumAmount = Math.floor(level / 5) + Math.floor(Math.random() * 3);\n      rewards.push({\n        type: 'nexium',\n        name: 'Milestone Nexium',\n        quantity: nexiumAmount,\n        value: nexiumAmount * 100\n      });\n    }\n    \n    // Special rewards at certain levels\n    if (level === 10) {\n      rewards.push({\n        type: 'component',\n        name: 'Advanced Navigation System',\n        quantity: 1,\n        value: 500\n      });\n    } else if (level === 20) {\n      rewards.push({\n        type: 'upgrade',\n        name: 'Elite Pilot License',\n        quantity: 1,\n        value: 1000\n      });\n    } else if (level === 50) {\n      rewards.push({\n        type: 'artifact',\n        name: 'Commander\\'s Insignia',\n        quantity: 1,\n        value: 5000\n      });\n    }\n    \n    return rewards;\n  }\n\n  calculateQuestRewards(questDifficulty: number, questLength: number, userLevel: number): Reward[] {\n    const rewards: Reward[] = [];\n    const baseMultiplier = questDifficulty * questLength * (1 + userLevel * 0.05);\n    \n    // Base credit reward\n    const credits = Math.floor((200 + Math.random() * 300) * baseMultiplier);\n    rewards.push({\n      type: 'credits',\n      name: 'Quest Completion',\n      quantity: 1,\n      value: credits\n    });\n    \n    // Experience (handled separately in game logic)\n    const experience = Math.floor((100 + Math.random() * 200) * baseMultiplier);\n    rewards.push({\n      type: 'experience',\n      name: 'Quest Experience',\n      quantity: experience,\n      value: 0\n    });\n    \n    // Chance for special rewards based on difficulty\n    if (questDifficulty >= 3) {\n      rewards.push(...this.generateSpecialQuestRewards(baseMultiplier));\n    }\n    \n    return rewards;\n  }\n\n  private generateExplorationRewards(levelMultiplier: number, sensorMultiplier: number): Reward[] {\n    const rewards: Reward[] = [];\n    const totalMultiplier = levelMultiplier * sensorMultiplier;\n    \n    // Credits from exploration\n    const credits = Math.floor((30 + Math.random() * 70) * totalMultiplier);\n    rewards.push({\n      type: 'credits',\n      name: 'Exploration Data',\n      quantity: 1,\n      value: credits\n    });\n    \n    // Common materials\n    const materials = ['Iron Ore', 'Silicon', 'Carbon Fiber', 'Aluminum'];\n    const materialName = materials[Math.floor(Math.random() * materials.length)];\n    const quantity = Math.floor((2 + Math.random() * 4) * levelMultiplier);\n    \n    rewards.push({\n      type: 'material',\n      name: materialName,\n      quantity,\n      value: quantity * 5\n    });\n    \n    // Chance for rare discovery\n    if (Math.random() < 0.3 * sensorMultiplier) {\n      const rareFinds = ['Energy Crystal', 'Rare Metals', 'Quantum Fragment'];\n      const rareName = rareFinds[Math.floor(Math.random() * rareFinds.length)];\n      rewards.push({\n        type: 'artifact',\n        name: rareName,\n        quantity: 1,\n        value: Math.floor(100 * totalMultiplier)\n      });\n    }\n    \n    return rewards;\n  }\n\n  private generateHuntingRewards(levelMultiplier: number): Reward[] {\n    const rewards: Reward[] = [];\n    \n    // Credits from hunting\n    const credits = Math.floor((40 + Math.random() * 80) * levelMultiplier);\n    rewards.push({\n      type: 'credits',\n      name: 'Bounty Payment',\n      quantity: 1,\n      value: credits\n    });\n    \n    // Hunting materials\n    const huntMaterials = ['Organic Compounds', 'Protein Synthesis', 'Biomass', 'Genetic Samples'];\n    const materialName = huntMaterials[Math.floor(Math.random() * huntMaterials.length)];\n    const quantity = Math.floor((1 + Math.random() * 3) * levelMultiplier);\n    \n    rewards.push({\n      type: 'material',\n      name: materialName,\n      quantity,\n      value: quantity * 15\n    });\n    \n    // Rare hunting trophy\n    if (Math.random() < 0.2) {\n      rewards.push({\n        type: 'artifact',\n        name: 'Rare Trophy',\n        quantity: 1,\n        value: Math.floor(200 * levelMultiplier)\n      });\n    }\n    \n    return rewards;\n  }\n\n  private generateArtifactRewards(levelMultiplier: number, sensorMultiplier: number): Reward[] {\n    const rewards: Reward[] = [];\n    const totalMultiplier = levelMultiplier * sensorMultiplier;\n    \n    // Higher chance for valuable finds\n    if (Math.random() < 0.6) {\n      const artifacts = [\n        'Ancient Data Core', 'Alien Technology Fragment', 'Quantum Artifact',\n        'Temporal Resonator', 'Dimensional Key', 'Psionic Crystal'\n      ];\n      \n      const artifactName = artifacts[Math.floor(Math.random() * artifacts.length)];\n      const value = Math.floor((150 + Math.random() * 350) * totalMultiplier);\n      \n      rewards.push({\n        type: 'artifact',\n        name: artifactName,\n        quantity: 1,\n        value\n      });\n    } else {\n      // Consolation credits\n      const credits = Math.floor((25 + Math.random() * 50) * levelMultiplier);\n      rewards.push({\n        type: 'credits',\n        name: 'Archaeological Survey Fee',\n        quantity: 1,\n        value: credits\n      });\n    }\n    \n    return rewards;\n  }\n\n  private generateFishingRewards(levelMultiplier: number): Reward[] {\n    const rewards: Reward[] = [];\n    \n    // Fishing always gives something\n    const fishTypes = [\n      'Space Plankton', 'Quantum Fish', 'Void Eel', 'Stellar Salmon',\n      'Nebula Crab', 'Cosmic Shrimp', 'Dark Matter Whale'\n    ];\n    \n    const fishName = fishTypes[Math.floor(Math.random() * fishTypes.length)];\n    const quantity = Math.floor((1 + Math.random() * 2) * levelMultiplier);\n    const value = Math.floor((20 + Math.random() * 30) * levelMultiplier);\n    \n    rewards.push({\n      type: 'material',\n      name: fishName,\n      quantity,\n      value: value * quantity\n    });\n    \n    // Small credit bonus\n    const credits = Math.floor((15 + Math.random() * 25) * levelMultiplier);\n    rewards.push({\n      type: 'credits',\n      name: 'Fishing License Fee',\n      quantity: 1,\n      value: credits\n    });\n    \n    return rewards;\n  }\n\n  private generateCombatMaterials(difficultyMultiplier: number, levelMultiplier: number): Reward[] {\n    const rewards: Reward[] = [];\n    const totalMultiplier = difficultyMultiplier * levelMultiplier;\n    \n    const combatMaterials = ['Scrap Metal', 'Damaged Electronics', 'Weapon Parts', 'Armor Fragments'];\n    const numMaterials = Math.floor(Math.random() * 2) + 1;\n    \n    for (let i = 0; i < numMaterials; i++) {\n      const materialName = combatMaterials[Math.floor(Math.random() * combatMaterials.length)];\n      const quantity = Math.floor((1 + Math.random() * 2) * totalMultiplier);\n      \n      rewards.push({\n        type: 'material',\n        name: materialName,\n        quantity,\n        value: quantity * 8\n      });\n    }\n    \n    return rewards;\n  }\n\n  private generateBasicReward(multiplier: number): Reward {\n    return {\n      type: 'credits',\n      name: 'Basic Reward',\n      quantity: 1,\n      value: Math.floor((10 + Math.random() * 20) * multiplier)\n    };\n  }\n\n  private generateSpecialQuestRewards(multiplier: number): Reward[] {\n    const rewards: Reward[] = [];\n    \n    // Chance for rare components\n    if (Math.random() < 0.4) {\n      const components = ['Advanced Targeting System', 'Quantum Engine', 'Neural Interface'];\n      const componentName = components[Math.floor(Math.random() * components.length)];\n      \n      rewards.push({\n        type: 'component',\n        name: componentName,\n        quantity: 1,\n        value: Math.floor(300 * multiplier)\n      });\n    }\n    \n    // Chance for nexium\n    if (Math.random() < 0.3) {\n      const nexiumAmount = Math.floor((2 + Math.random() * 4) * multiplier);\n      rewards.push({\n        type: 'nexium',\n        name: 'Quest Nexium',\n        quantity: nexiumAmount,\n        value: nexiumAmount * 100\n      });\n    }\n    \n    return rewards;\n  }\n\n  calculateMarketPriceModifier(rarity: string, basePrice: number): number {\n    const rarityMultipliers = {\n      'common': 1.0,\n      'uncommon': 1.5,\n      'rare': 2.5,\n      'epic': 4.0,\n      'legendary': 6.5\n    };\n    \n    const multiplier = rarityMultipliers[rarity as keyof typeof rarityMultipliers] || 1.0;\n    const marketFluctuation = 0.8 + Math.random() * 0.4; // ±20% market fluctuation\n    \n    return Math.floor(basePrice * multiplier * marketFluctuation);\n  }\n\n  calculateRepairCosts(shipHealth: number, maxHealth: number, shipTier: number): number {\n    const damagePercent = 1 - (shipHealth / maxHealth);\n    const baseCost = 50;\n    const tierMultiplier = 1 + (shipTier - 1) * 0.5;\n    \n    return Math.floor(baseCost * damagePercent * tierMultiplier * maxHealth / 100);\n  }\n\n  calculateSalvageValue(itemValue: number, condition: number): number {\n    // Condition is 0-1, where 1 is perfect condition\n    const salvageRate = 0.2 + condition * 0.3; // 20-50% of original value\n    return Math.floor(itemValue * salvageRate);\n  }\n}\n\nexport const rewardCalculator = new RewardCalculator();\n","size_bytes":11439},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Rocket, Home, Map, Users, Store, Menu } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\", icon: Home },\n    { name: \"Fleet\", href: \"/fleet\", icon: Rocket },\n    { name: \"Explore\", href: \"/explore\", icon: Map },\n    { name: \"Guild\", href: \"/guild\", icon: Users },\n    { name: \"Market\", href: \"/market\", icon: Store },\n  ];\n\n  const NavLinks = ({ mobile = false, onClose = () => {} }) => (\n    <>\n      {navigation.map((item) => {\n        const Icon = item.icon;\n        const isActive = location === item.href;\n        \n        return (\n          <Link key={item.name} href={item.href}>\n            <Button\n              variant={isActive ? \"default\" : \"ghost\"}\n              className={`${mobile ? 'w-full justify-start' : ''} ${\n                isActive \n                  ? 'bg-primary text-primary-foreground' \n                  : 'text-foreground hover:text-primary hover:bg-primary/10'\n              }`}\n              onClick={onClose}\n              data-testid={`nav-${item.name.toLowerCase()}`}\n            >\n              <Icon className=\"h-4 w-4 mr-2\" />\n              {item.name}\n            </Button>\n          </Link>\n        );\n      })}\n    </>\n  );\n\n  return (\n    <header className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-4 cursor-pointer\" data-testid=\"nav-logo\">\n              <Rocket className=\"h-8 w-8 text-primary glow-text\" />\n              <h1 className=\"text-2xl font-orbitron font-bold text-primary glow-text\">\n                STELLAR NEXUS\n              </h1>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex space-x-6\">\n            <NavLinks />\n          </nav>\n\n          {/* Mobile Navigation */}\n          <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"nav-mobile-menu\">\n                <Menu className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                <div className=\"flex items-center space-x-2 mb-6\">\n                  <Rocket className=\"h-6 w-6 text-primary\" />\n                  <span className=\"font-orbitron font-bold text-primary\">STELLAR NEXUS</span>\n                </div>\n                <NavLinks mobile={true} onClose={() => setMobileOpen(false)} />\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3229},"client/src/components/PlayerStatus.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport StatBar from \"@/components/StatBar\";\nimport { User, Ship } from \"@shared/schema\";\nimport { TrendingUp, Zap, Award, ShoppingCart } from \"lucide-react\";\n\ninterface PlayerStatusProps {\n  user: User;\n  activeShip?: Ship;\n}\n\nexport default function PlayerStatus({ user, activeShip }: PlayerStatusProps) {\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      <div className=\"lg:col-span-2\">\n        <Card className=\"glow-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-orbitron font-bold text-primary\">\n                Commander Profile\n              </CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Level</span>\n                <Badge className=\"text-xl font-bold bg-accent text-accent-foreground\" data-testid=\"badge-user-level\">\n                  {user.level}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-exploration-stat\">\n                  {user.stats.exploration}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Sectors Explored</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-destructive\" data-testid=\"text-combat-stat\">\n                  {user.stats.combat}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Battles Won</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-artifacts-stat\">\n                  {user.stats.artifacts}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Artifacts Found</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-trades-stat\">\n                  {user.stats.trades}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Trades Made</div>\n              </div>\n            </div>\n            \n            {/* Experience Progress */}\n            <div className=\"mt-6\">\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span className=\"text-muted-foreground\">Experience</span>\n                <span className=\"font-mono text-foreground\" data-testid=\"text-user-experience\">\n                  {user.experience}/{user.level * 1000}\n                </span>\n              </div>\n              <StatBar \n                value={user.experience % 1000} \n                max={1000} \n                className=\"h-2\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {/* Resource Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-orbitron font-bold text-primary\">\n              Resources\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-4 w-4 text-accent\" />\n                  <span className=\"text-sm text-muted-foreground\">Credits</span>\n                </div>\n                <span className=\"font-mono font-bold text-accent text-lg\" data-testid=\"text-user-credits\">\n                  {user.credits.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Zap className=\"h-4 w-4 text-secondary\" />\n                  <span className=\"text-sm text-muted-foreground\">Nexium</span>\n                </div>\n                <span className=\"font-mono font-bold text-secondary text-lg\" data-testid=\"text-user-nexium\">\n                  {user.nexium}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Ship */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-orbitron font-bold text-primary\">\n              Active Ship\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {activeShip ? (\n              <div className=\"text-center\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\" \n                  alt=\"Active spaceship\" \n                  className=\"rounded-lg w-full h-32 object-cover mb-4\"\n                />\n                <h4 className=\"font-orbitron font-bold text-lg text-foreground\" data-testid=\"text-active-ship-name\">\n                  {activeShip.variant}\n                </h4>\n                <p className=\"text-muted-foreground text-sm\" data-testid=\"text-active-ship-details\">\n                  {activeShip.type} - Tier {activeShip.tier}\n                </p>\n                <div className=\"mt-4 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Health</span>\n                    <span className=\"font-mono\" data-testid=\"text-active-ship-health\">\n                      {activeShip.health}/{activeShip.maxHealth}\n                    </span>\n                  </div>\n                  <StatBar \n                    value={activeShip.health} \n                    max={activeShip.maxHealth} \n                    className=\"h-2\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-6\">\n                <p className=\"text-muted-foreground\">No active ship</p>\n                <p className=\"text-sm text-muted-foreground\">Visit Fleet to select a ship</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6451},"client/src/components/ShipCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Ship } from \"@shared/schema\";\nimport { Zap, Package, Shield, Radar, Heart } from \"lucide-react\";\n\ninterface ShipCardProps {\n  ship: Ship;\n}\n\nexport default function ShipCard({ ship }: ShipCardProps) {\n  const getShipTypeColor = (type: string) => {\n    const colors = {\n      scout: 'text-primary',\n      fighter: 'text-destructive',\n      freighter: 'text-accent',\n      explorer: 'text-secondary',\n      battlecruiser: 'text-orange-500',\n      flagship: 'text-purple-500'\n    };\n    return colors[type as keyof typeof colors] || 'text-primary';\n  };\n\n  const getTierBadgeVariant = (tier: number) => {\n    if (tier >= 4) return 'default';\n    if (tier >= 3) return 'secondary';\n    return 'outline';\n  };\n\n  const getTierLabel = (tier: number) => {\n    if (tier >= 4) return 'MAX';\n    return `T${tier}`;\n  };\n\n  return (\n    <Card className={`ship-card transition-all duration-300 hover:border-primary/50 ${ship.isActive ? 'border-primary glow-border' : ''}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-orbitron font-bold text-lg text-foreground\" data-testid={`text-ship-name-${ship.id}`}>\n            {ship.variant}\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            {ship.isActive && (\n              <Badge className=\"bg-green-600 text-white text-xs\">ACTIVE</Badge>\n            )}\n            <Badge variant={getTierBadgeVariant(ship.tier)} data-testid={`badge-ship-tier-${ship.id}`}>\n              {getTierLabel(ship.tier)}\n            </Badge>\n          </div>\n        </div>\n        \n        <div className={`text-sm text-muted-foreground mb-3 ${getShipTypeColor(ship.type)}`} data-testid={`text-ship-type-${ship.id}`}>\n          {ship.type.charAt(0).toUpperCase() + ship.type.slice(1)} - Tier {ship.tier}\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-3 text-xs mb-4\">\n          <div className=\"flex items-center space-x-1\">\n            <Heart className=\"h-3 w-3 text-red-500\" />\n            <span className=\"text-muted-foreground\">Health:</span>\n            <span className=\"font-mono text-foreground\" data-testid={`text-ship-health-${ship.id}`}>\n              {ship.health}/{ship.maxHealth}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Zap className=\"h-3 w-3 text-secondary\" />\n            <span className=\"text-muted-foreground\">Speed:</span>\n            <span className=\"font-mono text-foreground\" data-testid={`text-ship-speed-${ship.id}`}>\n              {ship.speed}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Package className=\"h-3 w-3 text-accent\" />\n            <span className=\"text-muted-foreground\">Cargo:</span>\n            <span className=\"font-mono text-foreground\" data-testid={`text-ship-cargo-${ship.id}`}>\n              {ship.cargo}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Shield className=\"h-3 w-3 text-destructive\" />\n            <span className=\"text-muted-foreground\">Weapons:</span>\n            <span className=\"font-mono text-foreground\" data-testid={`text-ship-weapons-${ship.id}`}>\n              {ship.weapons}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-1 col-span-2\">\n            <Radar className=\"h-3 w-3 text-primary\" />\n            <span className=\"text-muted-foreground\">Sensors:</span>\n            <span className=\"font-mono text-foreground\" data-testid={`text-ship-sensors-${ship.id}`}>\n              {ship.sensors}\n            </span>\n          </div>\n        </div>\n\n        {/* Health bar if ship is damaged */}\n        {ship.health < ship.maxHealth && (\n          <div className=\"mb-3\">\n            <div className=\"w-full bg-muted rounded-full h-1.5\">\n              <div \n                className=\"bg-red-500 h-1.5 rounded-full transition-all\" \n                style={{ width: `${(ship.health / ship.maxHealth) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4272},"client/src/components/StatBar.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatBarProps {\n  value: number;\n  max: number;\n  className?: string;\n  color?: 'primary' | 'secondary' | 'accent' | 'destructive' | 'success';\n}\n\nexport default function StatBar({ value, max, className, color = 'primary' }: StatBarProps) {\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100));\n  \n  const colorClasses = {\n    primary: 'stat-bar',\n    secondary: 'bg-secondary',\n    accent: 'bg-accent',\n    destructive: 'bg-destructive',\n    success: 'bg-green-500'\n  };\n\n  return (\n    <div className={cn(\"w-full bg-muted rounded-full overflow-hidden\", className)}>\n      <div \n        className={cn(\n          \"h-full rounded-full transition-all duration-500 ease-in-out\",\n          colorClasses[color]\n        )}\n        style={{ width: `${percentage}%` }}\n        data-testid=\"stat-bar-fill\"\n      />\n    </div>\n  );\n}\n","size_bytes":884},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useGameData.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { gameApi } from \"@/lib/gameApi\";\n\n// Mock Discord ID - in production this would come from Discord OAuth\nconst MOCK_DISCORD_ID = \"mock_discord_user_123\";\n\nexport function useGameData() {\n  const { data: user, isLoading: userLoading, error: userError } = useQuery({\n    queryKey: ['/api/user', MOCK_DISCORD_ID],\n    queryFn: () => gameApi.getUser(MOCK_DISCORD_ID),\n    retry: false\n  });\n\n  const { data: ships = [], isLoading: shipsLoading } = useQuery({\n    queryKey: ['/api/user', user?.id, 'ships'],\n    queryFn: () => gameApi.getUserShips(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: resources = [], isLoading: resourcesLoading } = useQuery({\n    queryKey: ['/api/user', user?.id, 'resources'],\n    queryFn: () => gameApi.getUserResources(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: explorations = [], isLoading: explorationsLoading } = useQuery({\n    queryKey: ['/api/user', user?.id, 'explorations'],\n    queryFn: () => gameApi.getUserExplorations(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: guilds = [] } = useQuery({\n    queryKey: ['/api/guilds'],\n    queryFn: gameApi.getGuilds,\n    retry: false\n  });\n\n  const { data: marketItems = [] } = useQuery({\n    queryKey: ['/api/market/items'],\n    queryFn: gameApi.getMarketItems,\n    retry: false\n  });\n\n  const { data: recipes = [] } = useQuery({\n    queryKey: ['/api/recipes'],\n    queryFn: gameApi.getRecipes,\n    retry: false\n  });\n\n  const activeShip = ships.find((ship: any) => ship.isActive);\n  const userGuild = user?.guildId ? guilds.find((g: any) => g.id === user.guildId) : null;\n\n  return {\n    user,\n    ships,\n    resources,\n    explorations,\n    guilds,\n    marketItems,\n    recipes,\n    activeShip,\n    userGuild,\n    isLoading: userLoading || shipsLoading || resourcesLoading || explorationsLoading,\n    userError,\n    hasUser: !!user,\n    discordId: MOCK_DISCORD_ID\n  };\n}\n","size_bytes":1997},"client/src/lib/gameApi.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const gameApi = {\n  // User operations\n  async getUser(discordId: string) {\n    const response = await apiRequest('GET', `/api/user/${discordId}`);\n    return response.json();\n  },\n\n  async registerUser(discordId: string, username: string) {\n    const response = await apiRequest('POST', '/api/user/register', {\n      discordId,\n      username,\n      level: 1,\n      experience: 0,\n      credits: 1000,\n      nexium: 25,\n      stats: { exploration: 0, combat: 0, artifacts: 0, trades: 0 }\n    });\n    return response.json();\n  },\n\n  // Ship operations\n  async getUserShips(userId: string) {\n    const response = await apiRequest('GET', `/api/user/${userId}/ships`);\n    return response.json();\n  },\n\n  async activateShip(userId: string, shipId: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/ship/activate`, {\n      shipId\n    });\n    return response.json();\n  },\n\n  async upgradeShip(userId: string, shipId: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/ship/upgrade`, {\n      shipId\n    });\n    return response.json();\n  },\n\n  // Exploration operations\n  async explore(userId: string, type: string, sector?: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/explore`, {\n      type,\n      sector: sector || 'auto'\n    });\n    return response.json();\n  },\n\n  async getUserExplorations(userId: string, limit = 10) {\n    const response = await apiRequest('GET', `/api/user/${userId}/explorations?limit=${limit}`);\n    return response.json();\n  },\n\n  // Combat operations\n  async pveCombat(userId: string, enemyType: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/combat/pve`, {\n      enemyType\n    });\n    return response.json();\n  },\n\n  async pvpCombat(userId: string, targetUserId: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/combat/pvp`, {\n      targetUserId\n    });\n    return response.json();\n  },\n\n  // Market operations\n  async getMarketItems() {\n    const response = await apiRequest('GET', '/api/market/items');\n    return response.json();\n  },\n\n  async buyItem(userId: string, itemName: string, quantity: number) {\n    const response = await apiRequest('POST', '/api/market/buy', {\n      userId,\n      itemName,\n      quantity\n    });\n    return response.json();\n  },\n\n  async sellResource(userId: string, resourceId: string, quantity: number, pricePerUnit: number) {\n    const response = await apiRequest('POST', '/api/market/sell', {\n      userId,\n      resourceId,\n      quantity,\n      pricePerUnit\n    });\n    return response.json();\n  },\n\n  // Guild operations\n  async getGuilds() {\n    const response = await apiRequest('GET', '/api/guilds');\n    return response.json();\n  },\n\n  async joinGuild(userId: string, guildId: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/guild/join`, {\n      guildId\n    });\n    return response.json();\n  },\n\n  async contributeToGuild(userId: string, resourceType: string, amount: number) {\n    const response = await apiRequest('POST', `/api/user/${userId}/guild/contribute`, {\n      resourceType,\n      amount\n    });\n    return response.json();\n  },\n\n  // Alliance operations\n  async getAlliances() {\n    const response = await apiRequest('GET', '/api/alliances');\n    return response.json();\n  },\n\n  async createAlliance(userId: string, name: string, description: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/alliance/create`, {\n      name,\n      description\n    });\n    return response.json();\n  },\n\n  // Crafting operations\n  async getRecipes() {\n    const response = await apiRequest('GET', '/api/recipes');\n    return response.json();\n  },\n\n  async craftItem(userId: string, recipeId: string) {\n    const response = await apiRequest('POST', `/api/user/${userId}/craft`, {\n      recipeId\n    });\n    return response.json();\n  },\n\n  // Resource operations\n  async getUserResources(userId: string) {\n    const response = await apiRequest('GET', `/api/user/${userId}/resources`);\n    return response.json();\n  }\n};\n","size_bytes":4128},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport PlayerStatus from \"@/components/PlayerStatus\";\nimport ShipCard from \"@/components/ShipCard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { gameApi } from \"@/lib/gameApi\";\nimport { Rocket, Map, Users, Store, Crosshair, Fish, Gem, TrendingUp } from \"lucide-react\";\n\n// Mock Discord ID - in production this would come from Discord OAuth\nconst MOCK_DISCORD_ID = \"mock_discord_user_123\";\n\nexport default function Dashboard() {\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: ['/api/user', MOCK_DISCORD_ID],\n    queryFn: () => gameApi.getUser(MOCK_DISCORD_ID),\n    retry: false\n  });\n\n  const { data: ships = [], isLoading: shipsLoading } = useQuery({\n    queryKey: ['/api/user', user?.id, 'ships'],\n    queryFn: () => gameApi.getUserShips(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: explorations = [] } = useQuery({\n    queryKey: ['/api/user', user?.id, 'explorations'],\n    queryFn: () => gameApi.getUserExplorations(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: marketItems = [] } = useQuery({\n    queryKey: ['/api/market/items'],\n    queryFn: gameApi.getMarketItems,\n    retry: false\n  });\n\n  if (userLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading commander profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card className=\"max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"text-center font-orbitron\">\n              <Rocket className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              Welcome to Stellar Nexus\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              You need to register to start your space exploration journey.\n            </p>\n            <Button \n              onClick={() => gameApi.registerUser(MOCK_DISCORD_ID, \"TestCommander\")}\n              className=\"w-full\"\n              data-testid=\"button-register\"\n            >\n              Begin Your Journey\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const activeShip = ships.find(ship => ship.isActive);\n\n  return (\n    <main className=\"container mx-auto px-4 py-8\">\n      {/* Player Status */}\n      <section className=\"mb-8\">\n        <PlayerStatus user={user} activeShip={activeShip} />\n      </section>\n\n      {/* Fleet Management */}\n      <section className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-orbitron font-bold text-primary glow-text\">\n            Fleet Management\n          </h2>\n          <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-acquire-ship\">\n            <Rocket className=\"h-4 w-4 mr-2\" />\n            Acquire Ship\n          </Button>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {shipsLoading ? (\n            <div className=\"col-span-full text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p className=\"text-muted-foreground\">Loading fleet...</p>\n            </div>\n          ) : (\n            ships.map(ship => (\n              <ShipCard key={ship.id} ship={ship} />\n            ))\n          )}\n        </div>\n      </section>\n\n      {/* Exploration Hub */}\n      <section className=\"mb-8\">\n        <h2 className=\"text-2xl font-orbitron font-bold text-primary glow-text mb-6\">\n          Exploration Hub\n        </h2>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"glow-border\">\n            <CardHeader>\n              <CardTitle className=\"text-primary\">\n                <Map className=\"h-5 w-5 inline mr-2\" />\n                Galaxy Map\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 bg-muted rounded-lg overflow-hidden mb-4\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                  alt=\"Galaxy exploration map\" \n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-card/50\"></div>\n                <div className=\"absolute bottom-4 left-4 right-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Current Sector: Nexus-Alpha-7</span>\n                    <Button size=\"sm\" data-testid=\"button-jump-sector\">\n                      Jump\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\" data-testid=\"button-explore-sector\">\n                  <Map className=\"h-4 w-4 mr-2\" />\n                  Explore Sector\n                </Button>\n                <Button className=\"bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-hunt-resources\">\n                  <Crosshair className=\"h-4 w-4 mr-2\" />\n                  Hunt Resources\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-primary\">\n                  <Gem className=\"h-5 w-5 inline mr-2\" />\n                  Recent Discoveries\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {explorations.slice(0, 3).map((exploration, index) => (\n                    <div key={exploration.id} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                      <div>\n                        <div className=\"font-medium text-foreground\">\n                          {exploration.result?.rewards?.[0]?.name || 'Unknown Discovery'}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Sector {exploration.sector}\n                        </div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-accent\">\n                        +{exploration.result?.rewards?.[0]?.value || 0} Credits\n                      </Badge>\n                    </div>\n                  ))}\n                  {explorations.length === 0 && (\n                    <p className=\"text-muted-foreground text-center py-4\">\n                      No explorations yet. Start exploring to discover new sectors!\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-primary\">\n                  <Fish className=\"h-5 w-5 inline mr-2\" />\n                  Fishing Grounds\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1583212292454-1fe6229603b7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\" \n                  alt=\"Alien fishing grounds\" \n                  className=\"rounded-lg w-full h-24 object-cover mb-3\"\n                />\n                <Button className=\"w-full\" data-testid=\"button-start-fishing\">\n                  <Fish className=\"h-4 w-4 mr-2\" />\n                  Cast Line\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Combat and Market */}\n      <section className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-primary\">\n              <Crosshair className=\"h-5 w-5 inline mr-2\" />\n              Combat Arena\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted rounded-lg p-4\">\n                <h4 className=\"font-bold mb-2\">PvE Missions</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Asteroid Miners</span>\n                    <Button size=\"sm\" className=\"bg-primary text-primary-foreground\" data-testid=\"button-engage-miners\">\n                      Engage\n                    </Button>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Rogue Fleet</span>\n                    <Button size=\"sm\" variant=\"destructive\" data-testid=\"button-challenge-fleet\">\n                      Challenge\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-muted rounded-lg p-4\">\n                <h4 className=\"font-bold mb-2\">PvP Battles</h4>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm\">Active Duels</span>\n                  <Badge className=\"bg-accent text-accent-foreground\">3</Badge>\n                </div>\n                <Button className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\" data-testid=\"button-find-opponent\">\n                  <Crosshair className=\"h-4 w-4 mr-2\" />\n                  Find Opponent\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-primary\">\n              <Store className=\"h-5 w-5 inline mr-2\" />\n              Galactic Market\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted rounded-lg p-4\">\n                <h4 className=\"font-bold mb-3\">Trending Items</h4>\n                <div className=\"space-y-2\">\n                  {marketItems.slice(0, 3).map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium text-sm text-foreground\">{item.name}</div>\n                        <div className=\"text-xs text-accent\">\n                          <TrendingUp className=\"h-3 w-3 inline mr-1\" />\n                          Market Active\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-accent\">{item.price.toLocaleString()} ₡</div>\n                        <Button size=\"sm\" className=\"text-xs\" data-testid={`button-buy-${item.name.toLowerCase().replace(' ', '-')}`}>\n                          Buy\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\" data-testid=\"button-npc-shop\">\n                  NPC Shop\n                </Button>\n                <Button className=\"bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-crafting-menu\">\n                  Crafting\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </section>\n    </main>\n  );\n}\n","size_bytes":12335},"client/src/pages/Explore.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { gameApi } from \"@/lib/gameApi\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Map, Crosshair, Fish, Gem, Zap, Clock, Award } from \"lucide-react\";\n\n// Mock Discord ID - in production this would come from Discord OAuth\nconst MOCK_DISCORD_ID = \"mock_discord_user_123\";\n\nexport default function Explore() {\n  const [selectedExplorationType, setSelectedExplorationType] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const { data: user } = useQuery({\n    queryKey: ['/api/user', MOCK_DISCORD_ID],\n    queryFn: () => gameApi.getUser(MOCK_DISCORD_ID),\n    retry: false\n  });\n\n  const { data: ships = [] } = useQuery({\n    queryKey: ['/api/user', user?.id, 'ships'],\n    queryFn: () => gameApi.getUserShips(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: explorations = [], isLoading: explorationsLoading } = useQuery({\n    queryKey: ['/api/user', user?.id, 'explorations'],\n    queryFn: () => gameApi.getUserExplorations(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const exploreMutation = useMutation({\n    mutationFn: (type: string) => gameApi.explore(user!.id, type),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      const rewards = data.result?.rewards || [];\n      const rewardText = rewards.map(r => `${r.name} x${r.quantity}`).join(', ');\n      \n      toast({\n        title: \"Exploration Complete!\",\n        description: `Rewards: ${rewardText || 'Experience gained'}`\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Exploration Failed\",\n        description: error.message || \"Try again later\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const activeShip = ships.find(ship => ship.isActive);\n\n  const explorationTypes = [\n    {\n      id: 'exploration',\n      name: 'Sector Scan',\n      icon: Map,\n      description: 'Comprehensive sector analysis and mapping',\n      color: 'text-primary'\n    },\n    {\n      id: 'hunting',\n      name: 'Resource Hunt',\n      icon: Crosshair,\n      description: 'Target valuable resources and materials',\n      color: 'text-destructive'\n    },\n    {\n      id: 'artifact_search',\n      name: 'Artifact Search',\n      icon: Gem,\n      description: 'Search for ancient artifacts and technology',\n      color: 'text-accent'\n    },\n    {\n      id: 'fishing',\n      name: 'Deep Space Fishing',\n      icon: Fish,\n      description: 'Harvest exotic space-dwelling creatures',\n      color: 'text-secondary'\n    }\n  ];\n\n  const handleExplore = () => {\n    if (!selectedExplorationType) {\n      toast({\n        title: \"Select exploration type\",\n        description: \"Choose what type of exploration to perform\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    exploreMutation.mutate(selectedExplorationType);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-3xl font-orbitron font-bold text-primary glow-text\">\n          Deep Space Exploration\n        </h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Exploration Level</div>\n            <div className=\"font-mono font-bold text-primary\" data-testid=\"text-exploration-level\">\n              {user?.stats?.exploration || 0}\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Active Ship</div>\n            <div className=\"font-mono font-bold text-secondary\" data-testid=\"text-active-ship\">\n              {activeShip?.variant || 'None'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Exploration Control Panel */}\n        <div className=\"space-y-6\">\n          <Card className=\"glow-border\">\n            <CardHeader>\n              <CardTitle className=\"text-primary\">\n                <Map className=\"h-5 w-5 inline mr-2\" />\n                Mission Control\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {!activeShip ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground mb-4\">No active ship selected</p>\n                  <p className=\"text-sm\">Visit Fleet Management to activate a ship</p>\n                </div>\n              ) : (\n                <>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground block mb-2\">\n                      Exploration Type\n                    </label>\n                    <Select value={selectedExplorationType} onValueChange={setSelectedExplorationType}>\n                      <SelectTrigger data-testid=\"select-exploration-type\">\n                        <SelectValue placeholder=\"Select exploration mission\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {explorationTypes.map(type => {\n                          const Icon = type.icon;\n                          return (\n                            <SelectItem key={type.id} value={type.id}>\n                              <div className=\"flex items-center\">\n                                <Icon className={`h-4 w-4 mr-2 ${type.color}`} />\n                                {type.name}\n                              </div>\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {selectedExplorationType && (\n                    <div className=\"bg-muted rounded-lg p-4\">\n                      {(() => {\n                        const type = explorationTypes.find(t => t.id === selectedExplorationType);\n                        const Icon = type?.icon || Map;\n                        return (\n                          <div>\n                            <div className=\"flex items-center mb-2\">\n                              <Icon className={`h-5 w-5 mr-2 ${type?.color}`} />\n                              <h4 className=\"font-semibold\">{type?.name}</h4>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">{type?.description}</p>\n                          </div>\n                        );\n                      })()}\n                    </div>\n                  )}\n\n                  <Button \n                    className=\"w-full\" \n                    size=\"lg\"\n                    disabled={!selectedExplorationType || exploreMutation.isPending}\n                    onClick={handleExplore}\n                    data-testid=\"button-start-exploration\"\n                  >\n                    {exploreMutation.isPending ? (\n                      <>\n                        <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Exploring...\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"h-4 w-4 mr-2\" />\n                        Begin Exploration\n                      </>\n                    )}\n                  </Button>\n\n                  <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Ship Sensors:</span>\n                      <span className=\"font-mono ml-1 text-primary\" data-testid=\"text-ship-sensors\">\n                        {activeShip.sensors}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Success Rate:</span>\n                      <span className=\"font-mono ml-1 text-accent\">\n                        ~{Math.min(95, 60 + activeShip.sensors * 0.3).toFixed(0)}%\n                      </span>\n                    </div>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Exploration Types Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">Exploration Guide</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {explorationTypes.map(type => {\n                  const Icon = type.icon;\n                  return (\n                    <div key={type.id} className=\"flex items-start space-x-3 p-3 bg-muted rounded-lg\">\n                      <Icon className={`h-5 w-5 mt-0.5 ${type.color}`} />\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\">{type.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Exploration History */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">\n                <Award className=\"h-5 w-5 inline mr-2\" />\n                Recent Expeditions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {explorationsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading exploration history...</p>\n                </div>\n              ) : explorations.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {explorations.map((exploration, index) => (\n                    <div key={exploration.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge \n                            variant={exploration.result?.success ? \"default\" : \"secondary\"}\n                            className={exploration.result?.success ? \"bg-green-600\" : \"\"}\n                          >\n                            {exploration.result?.success ? \"Success\" : \"Partial\"}\n                          </Badge>\n                          <span className=\"text-sm font-medium\" data-testid={`text-exploration-type-${index}`}>\n                            {exploration.type.replace('_', ' ').toUpperCase()}\n                          </span>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\" data-testid={`text-exploration-sector-${index}`}>\n                          {exploration.sector}\n                        </span>\n                      </div>\n                      \n                      {exploration.result?.rewards && exploration.result.rewards.length > 0 && (\n                        <div className=\"space-y-1\">\n                          <h5 className=\"text-xs font-medium text-muted-foreground\">Rewards:</h5>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {exploration.result.rewards.map((reward, idx) => (\n                              <Badge key={idx} variant=\"outline\" className=\"text-xs\" data-testid={`badge-reward-${index}-${idx}`}>\n                                {reward.name} x{reward.quantity}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center justify-between mt-2 text-xs text-muted-foreground\">\n                        <span>Experience: +{exploration.result?.experience || 0}</span>\n                        <span>{new Date(exploration.timestamp || '').toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Map className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No explorations yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Start your first expedition to map the unknown!</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Current Sector Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">Current Sector: Nexus-Alpha-7</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-48 bg-muted rounded-lg overflow-hidden mb-4\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=300\" \n                  alt=\"Current sector view\" \n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-background/50 to-transparent\"></div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Difficulty:</span>\n                  <span className=\"ml-2 font-mono text-accent\">Level 3</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Hostiles:</span>\n                  <span className=\"ml-2 font-mono text-destructive\">Moderate</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Resources:</span>\n                  <span className=\"ml-2 font-mono text-secondary\">Rich</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Phenomena:</span>\n                  <span className=\"ml-2 font-mono text-primary\">Ion Storms</span>\n                </div>\n              </div>\n              \n              <Button variant=\"outline\" className=\"w-full mt-4\" data-testid=\"button-change-sector\">\n                <Map className=\"h-4 w-4 mr-2\" />\n                Change Sector\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14880},"client/src/pages/Fleet.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ShipCard from \"@/components/ShipCard\";\nimport StatBar from \"@/components/StatBar\";\nimport { gameApi } from \"@/lib/gameApi\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Rocket, Zap, Package, Shield, Radar, Wrench } from \"lucide-react\";\n\n// Mock Discord ID - in production this would come from Discord OAuth\nconst MOCK_DISCORD_ID = \"mock_discord_user_123\";\n\nexport default function Fleet() {\n  const { toast } = useToast();\n\n  const { data: user } = useQuery({\n    queryKey: ['/api/user', MOCK_DISCORD_ID],\n    queryFn: () => gameApi.getUser(MOCK_DISCORD_ID),\n    retry: false\n  });\n\n  const { data: ships = [], isLoading } = useQuery({\n    queryKey: ['/api/user', user?.id, 'ships'],\n    queryFn: () => gameApi.getUserShips(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const activateShipMutation = useMutation({\n    mutationFn: (shipId: string) => gameApi.activateShip(user!.id, shipId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({ title: \"Ship activated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to activate ship\", variant: \"destructive\" });\n    }\n  });\n\n  const upgradeShipMutation = useMutation({\n    mutationFn: (shipId: string) => gameApi.upgradeShip(user!.id, shipId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({ title: \"Ship upgraded successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Upgrade failed\", \n        description: error.message || \"Check resources and requirements\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const activeShip = ships.find(ship => ship.isActive);\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading fleet data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-3xl font-orbitron font-bold text-primary glow-text\">\n          Fleet Command\n        </h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Credits</div>\n            <div className=\"font-mono font-bold text-accent\" data-testid=\"text-user-credits\">\n              {user?.credits?.toLocaleString() || 0}\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Nexium</div>\n            <div className=\"font-mono font-bold text-secondary\" data-testid=\"text-user-nexium\">\n              {user?.nexium || 0}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Active Ship Status */}\n      {activeShip && (\n        <Card className=\"mb-8 glow-border\">\n          <CardHeader>\n            <CardTitle className=\"text-primary\">\n              <Rocket className=\"h-5 w-5 inline mr-2\" />\n              Active Ship Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-orbitron font-bold text-xl mb-2\" data-testid=\"text-active-ship-name\">\n                  {activeShip.variant}\n                </h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"text-active-ship-type\">\n                  {activeShip.type} - Tier {activeShip.tier}\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Health</span>\n                      <span className=\"font-mono\" data-testid=\"text-ship-health\">\n                        {activeShip.health}/{activeShip.maxHealth}\n                      </span>\n                    </div>\n                    <StatBar \n                      value={activeShip.health} \n                      max={activeShip.maxHealth} \n                      className=\"h-2\"\n                    />\n                  </div>\n                  \n                  {activeShip.health < activeShip.maxHealth && (\n                    <Button size=\"sm\" variant=\"outline\" data-testid=\"button-repair-ship\">\n                      <Wrench className=\"h-4 w-4 mr-2\" />\n                      Repair Ship\n                    </Button>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <Zap className=\"h-4 w-4 mr-2 text-secondary\" />\n                  <div>\n                    <div className=\"text-muted-foreground\">Speed</div>\n                    <div className=\"font-mono\" data-testid=\"text-ship-speed\">{activeShip.speed}</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Package className=\"h-4 w-4 mr-2 text-accent\" />\n                  <div>\n                    <div className=\"text-muted-foreground\">Cargo</div>\n                    <div className=\"font-mono\" data-testid=\"text-ship-cargo\">{activeShip.cargo}</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Shield className=\"h-4 w-4 mr-2 text-destructive\" />\n                  <div>\n                    <div className=\"text-muted-foreground\">Weapons</div>\n                    <div className=\"font-mono\" data-testid=\"text-ship-weapons\">{activeShip.weapons}</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Radar className=\"h-4 w-4 mr-2 text-primary\" />\n                  <div>\n                    <div className=\"text-muted-foreground\">Sensors</div>\n                    <div className=\"font-mono\" data-testid=\"text-ship-sensors\">{activeShip.sensors}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Fleet Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {ships.map(ship => (\n          <div key={ship.id} className=\"relative\">\n            <ShipCard ship={ship} />\n            <div className=\"mt-4 flex space-x-2\">\n              <Button\n                className=\"flex-1\"\n                variant={ship.isActive ? \"secondary\" : \"default\"}\n                disabled={ship.isActive || activateShipMutation.isPending}\n                onClick={() => activateShipMutation.mutate(ship.id)}\n                data-testid={`button-activate-${ship.id}`}\n              >\n                {ship.isActive ? \"Active\" : \"Activate\"}\n              </Button>\n              \n              {ship.tier < 4 && (\n                <Button\n                  variant=\"outline\"\n                  disabled={upgradeShipMutation.isPending}\n                  onClick={() => upgradeShipMutation.mutate(ship.id)}\n                  data-testid={`button-upgrade-${ship.id}`}\n                >\n                  <Zap className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {ship.tier >= 4 && (\n                <Badge variant=\"secondary\" className=\"px-3 py-1 h-10 flex items-center\">\n                  MAX\n                </Badge>\n              )}\n            </div>\n          </div>\n        ))}\n        \n        {/* Add Ship Card */}\n        <Card className=\"border-dashed border-2 border-muted hover:border-primary transition-colors cursor-pointer\">\n          <CardContent className=\"p-6 text-center\">\n            <Rocket className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">Acquire New Ship</h3>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              Expand your fleet with specialized vessels\n            </p>\n            <Button className=\"w-full\" data-testid=\"button-acquire-new-ship\">\n              Browse Shipyard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Ship Type Information */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle className=\"text-primary\">Ship Type Guide</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-semibold text-primary mb-2\">Scout</h4>\n              <p className=\"text-muted-foreground\">Fast and agile exploration ships. High speed and sensors for sector scanning and resource discovery.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-destructive mb-2\">Fighter</h4>\n              <p className=\"text-muted-foreground\">Combat-focused vessels with heavy armament. Designed for PvP battles and bounty hunting.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-accent mb-2\">Freighter</h4>\n              <p className=\"text-muted-foreground\">Cargo and trade ships with massive storage capacity. Perfect for resource transportation.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-secondary mb-2\">Explorer</h4>\n              <p className=\"text-muted-foreground\">Long-range discovery ships for deep space exploration and artifact recovery.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-orange-500 mb-2\">Battlecruiser</h4>\n              <p className=\"text-muted-foreground\">Heavy combat ships for large-scale raids and defensive operations.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-purple-500 mb-2\">Flagship</h4>\n              <p className=\"text-muted-foreground\">Command vessels for fleet leadership and diplomatic missions.</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10550},"client/src/pages/Guild.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport StatBar from \"@/components/StatBar\";\nimport { gameApi } from \"@/lib/gameApi\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Users, Trophy, Gem, TrendingUp, Crown, Sword, Compass, Microscope, Banknote } from \"lucide-react\";\n\n// Mock Discord ID - in production this would come from Discord OAuth\nconst MOCK_DISCORD_ID = \"mock_discord_user_123\";\n\nexport default function Guild() {\n  const { toast } = useToast();\n\n  const { data: user } = useQuery({\n    queryKey: ['/api/user', MOCK_DISCORD_ID],\n    queryFn: () => gameApi.getUser(MOCK_DISCORD_ID),\n    retry: false\n  });\n\n  const { data: guilds = [] } = useQuery({\n    queryKey: ['/api/guilds'],\n    queryFn: gameApi.getGuilds,\n    retry: false\n  });\n\n  const joinGuildMutation = useMutation({\n    mutationFn: (guildId: string) => gameApi.joinGuild(user!.id, guildId),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({\n        title: \"Guild Joined!\",\n        description: `Welcome to ${data.guild?.name}!`\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to join guild\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const contributeGuildMutation = useMutation({\n    mutationFn: (data: { resourceType: string; amount: number }) => \n      gameApi.contributeToGuild(user!.id, data.resourceType, data.amount),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({ title: \"Contribution successful!\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Contribution failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const userGuild = user?.guildId ? guilds.find(g => g.id === user.guildId) : null;\n\n  const guildTypeIcons = {\n    military: Sword,\n    trade: Banknote,\n    exploration: Compass,\n    research: Microscope\n  };\n\n  const guildTypeColors = {\n    military: 'text-destructive',\n    trade: 'text-accent',\n    exploration: 'text-primary',\n    research: 'text-secondary'\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-3xl font-orbitron font-bold text-primary glow-text\">\n          Guild Command\n        </h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Credits</div>\n            <div className=\"font-mono font-bold text-accent\" data-testid=\"text-user-credits\">\n              {user?.credits?.toLocaleString() || 0}\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Nexium</div>\n            <div className=\"font-mono font-bold text-secondary\" data-testid=\"text-user-nexium\">\n              {user?.nexium || 0}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {userGuild ? (\n        /* User is in a guild */\n        <div className=\"space-y-8\">\n          {/* Guild Status */}\n          <Card className=\"glow-border\">\n            <CardHeader>\n              <CardTitle className=\"text-primary flex items-center\">\n                <Shield className=\"h-6 w-6 mr-2\" />\n                {userGuild.name}\n                {(() => {\n                  const Icon = guildTypeIcons[userGuild.type as keyof typeof guildTypeIcons] || Shield;\n                  const color = guildTypeColors[userGuild.type as keyof typeof guildTypeColors] || 'text-primary';\n                  return <Icon className={`h-5 w-5 ml-2 ${color}`} />;\n                })()}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"text-center\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1614728894747-a83421e2b9c9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\" \n                    alt=\"Guild emblem\" \n                    className=\"rounded-lg w-24 h-24 mx-auto object-cover mb-4\"\n                  />\n                  <h3 className=\"font-orbitron font-bold text-xl\" data-testid=\"text-guild-name\">\n                    {userGuild.name}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-guild-type\">\n                    {userGuild.type.charAt(0).toUpperCase() + userGuild.type.slice(1)} Guild\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between mb-1\">\n                      <span>Guild Level</span>\n                      <Badge className=\"bg-accent text-accent-foreground\" data-testid=\"badge-guild-level\">\n                        Level {userGuild.level}\n                      </Badge>\n                    </div>\n                    <StatBar \n                      value={userGuild.experience % 1000} \n                      max={1000} \n                      className=\"h-2\"\n                    />\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {userGuild.experience} / {userGuild.level * 1000} XP\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Members</span>\n                      <div className=\"font-mono text-foreground\" data-testid=\"text-guild-members\">\n                        {userGuild.memberCount}/{userGuild.maxMembers}\n                      </div>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Rank</span>\n                      <div className=\"font-mono text-secondary\" data-testid=\"text-guild-rank\">\n                        #{Math.floor(Math.random() * 10) + 1}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 grid grid-cols-2 gap-4\">\n                <Button \n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  onClick={() => contributeGuildMutation.mutate({ resourceType: 'credits', amount: 100 })}\n                  disabled={!user?.credits || user.credits < 100 || contributeGuildMutation.isPending}\n                  data-testid=\"button-contribute-credits\"\n                >\n                  <Gem className=\"h-4 w-4 mr-2\" />\n                  Contribute Credits\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => contributeGuildMutation.mutate({ resourceType: 'nexium', amount: 1 })}\n                  disabled={!user?.nexium || user.nexium < 1 || contributeGuildMutation.isPending}\n                  data-testid=\"button-contribute-nexium\"\n                >\n                  <Gem className=\"h-4 w-4 mr-2\" />\n                  Contribute Nexium\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Guild Benefits */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">Guild Benefits</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <TrendingUp className=\"h-6 w-6 mx-auto text-accent mb-2\" />\n                  <h4 className=\"font-semibold\">Experience Bonus</h4>\n                  <p className=\"text-sm text-muted-foreground\">+{userGuild.level * 2}%</p>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <Shield className=\"h-6 w-6 mx-auto text-primary mb-2\" />\n                  <h4 className=\"font-semibold\">Defense Bonus</h4>\n                  <p className=\"text-sm text-muted-foreground\">+{userGuild.level * 5} Points</p>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <Users className=\"h-6 w-6 mx-auto text-secondary mb-2\" />\n                  <h4 className=\"font-semibold\">Group Activities</h4>\n                  <p className=\"text-sm text-muted-foreground\">Unlocked</p>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <Crown className=\"h-6 w-6 mx-auto text-accent mb-2\" />\n                  <h4 className=\"font-semibold\">Prestige</h4>\n                  <p className=\"text-sm text-muted-foreground\">Guild Rank #{Math.floor(Math.random() * 10) + 1}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Guild Rankings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">\n                <Trophy className=\"h-5 w-5 inline mr-2\" />\n                Guild Rankings\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {guilds.sort((a, b) => (b.level * 1000 + b.experience) - (a.level * 1000 + a.experience)).slice(0, 10).map((guild, index) => {\n                  const Icon = guildTypeIcons[guild.type as keyof typeof guildTypeIcons] || Shield;\n                  const color = guildTypeColors[guild.type as keyof typeof guildTypeColors] || 'text-primary';\n                  const isCurrentGuild = guild.id === userGuild.id;\n                  \n                  return (\n                    <div \n                      key={guild.id} \n                      className={`flex items-center justify-between p-3 rounded-lg ${isCurrentGuild ? 'bg-primary/10 border border-primary/20' : 'bg-muted'}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge variant={index < 3 ? \"default\" : \"secondary\"} className=\"w-8 h-8 rounded-full p-0 flex items-center justify-center\">\n                          {index + 1}\n                        </Badge>\n                        <Icon className={`h-5 w-5 ${color}`} />\n                        <div>\n                          <div className=\"font-semibold text-foreground\" data-testid={`text-ranked-guild-${index}`}>\n                            {guild.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Level {guild.level} • {guild.memberCount} members\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-mono text-foreground\">\n                          {(guild.level * 1000 + guild.experience).toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Power</div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        /* User not in a guild */\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">Available Guilds</CardTitle>\n              <p className=\"text-muted-foreground\">Choose a guild to join and begin your organized space exploration</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {guilds.map(guild => {\n                  const Icon = guildTypeIcons[guild.type as keyof typeof guildTypeIcons] || Shield;\n                  const color = guildTypeColors[guild.type as keyof typeof guildTypeColors] || 'text-primary';\n                  \n                  return (\n                    <Card key={guild.id} className=\"border-2 hover:border-primary/50 transition-colors\">\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <Icon className={`h-6 w-6 mr-2 ${color}`} />\n                          {guild.name}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`text-guild-description-${guild.id}`}>\n                          {guild.description || `A ${guild.type} focused guild`}\n                        </p>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Type</span>\n                            <Badge variant=\"outline\" className={color} data-testid={`badge-guild-type-${guild.id}`}>\n                              {guild.type.charAt(0).toUpperCase() + guild.type.slice(1)}\n                            </Badge>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Level</span>\n                            <span className=\"font-mono text-foreground\" data-testid={`text-guild-level-${guild.id}`}>\n                              {guild.level}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Members</span>\n                            <span className=\"font-mono text-foreground\" data-testid={`text-guild-member-count-${guild.id}`}>\n                              {guild.memberCount}/{guild.maxMembers}\n                            </span>\n                          </div>\n                          <Button \n                            className=\"w-full mt-4\"\n                            disabled={guild.memberCount >= guild.maxMembers || joinGuildMutation.isPending}\n                            onClick={() => joinGuildMutation.mutate(guild.id)}\n                            data-testid={`button-join-guild-${guild.id}`}\n                          >\n                            {guild.memberCount >= guild.maxMembers ? 'Full' : 'Join Guild'}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Guild Type Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">Guild Types</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-start space-x-3 p-4 bg-muted rounded-lg\">\n                  <Sword className=\"h-6 w-6 text-destructive mt-1\" />\n                  <div>\n                    <h4 className=\"font-semibold text-destructive\">Military</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Combat-focused guilds specializing in fleet battles and territorial control\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3 p-4 bg-muted rounded-lg\">\n                  <Banknote className=\"h-6 w-6 text-accent mt-1\" />\n                  <div>\n                    <h4 className=\"font-semibold text-accent\">Trade</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Economic guilds focused on resource trading and market manipulation\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3 p-4 bg-muted rounded-lg\">\n                  <Compass className=\"h-6 w-6 text-primary mt-1\" />\n                  <div>\n                    <h4 className=\"font-semibold text-primary\">Exploration</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Discovery-oriented guilds mapping unknown sectors and finding artifacts\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3 p-4 bg-muted rounded-lg\">\n                  <Microscope className=\"h-6 w-6 text-secondary mt-1\" />\n                  <div>\n                    <h4 className=\"font-semibold text-secondary\">Research</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Technology-focused guilds advancing ship upgrades and new technologies\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17431},"client/src/pages/Market.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { gameApi } from \"@/lib/gameApi\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Store, TrendingUp, TrendingDown, Package, ShoppingCart, Coins, Wrench } from \"lucide-react\";\n\n// Mock Discord ID - in production this would come from Discord OAuth\nconst MOCK_DISCORD_ID = \"mock_discord_user_123\";\n\nexport default function Market() {\n  const [buyQuantity, setBuyQuantity] = useState<number>(1);\n  const [sellQuantity, setSellQuantity] = useState<number>(1);\n  const [sellPrice, setSellPrice] = useState<number>(0);\n  const [selectedResource, setSelectedResource] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const { data: user } = useQuery({\n    queryKey: ['/api/user', MOCK_DISCORD_ID],\n    queryFn: () => gameApi.getUser(MOCK_DISCORD_ID),\n    retry: false\n  });\n\n  const { data: marketItems = [], isLoading: marketLoading } = useQuery({\n    queryKey: ['/api/market/items'],\n    queryFn: gameApi.getMarketItems,\n    retry: false\n  });\n\n  const { data: resources = [] } = useQuery({\n    queryKey: ['/api/user', user?.id, 'resources'],\n    queryFn: () => gameApi.getUserResources(user!.id),\n    enabled: !!user?.id,\n    retry: false\n  });\n\n  const { data: recipes = [] } = useQuery({\n    queryKey: ['/api/recipes'],\n    queryFn: gameApi.getRecipes,\n    retry: false\n  });\n\n  const buyItemMutation = useMutation({\n    mutationFn: (data: { itemName: string; quantity: number }) =>\n      gameApi.buyItem(user!.id, data.itemName, data.quantity),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({ title: \"Purchase successful!\" });\n      setBuyQuantity(1);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const sellResourceMutation = useMutation({\n    mutationFn: (data: { resourceId: string; quantity: number; pricePerUnit: number }) =>\n      gameApi.sellResource(user!.id, data.resourceId, data.quantity, data.pricePerUnit),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({ title: \"Sale successful!\" });\n      setSellQuantity(1);\n      setSellPrice(0);\n      setSelectedResource(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sale failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const craftItemMutation = useMutation({\n    mutationFn: (recipeId: string) => gameApi.craftItem(user!.id, recipeId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({ title: \"Item crafted successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Crafting failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleBuyItem = (itemName: string) => {\n    buyItemMutation.mutate({ itemName, quantity: buyQuantity });\n  };\n\n  const handleSellResource = () => {\n    if (!selectedResource || sellQuantity <= 0 || sellPrice <= 0) {\n      toast({\n        title: \"Invalid input\",\n        description: \"Please select a resource and enter valid quantity and price\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    sellResourceMutation.mutate({\n      resourceId: selectedResource,\n      quantity: sellQuantity,\n      pricePerUnit: sellPrice\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-3xl font-orbitron font-bold text-primary glow-text\">\n          Galactic Market\n        </h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Credits</div>\n            <div className=\"font-mono font-bold text-accent\" data-testid=\"text-user-credits\">\n              {user?.credits?.toLocaleString() || 0}\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Nexium</div>\n            <div className=\"font-mono font-bold text-secondary\" data-testid=\"text-user-nexium\">\n              {user?.nexium || 0}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"buy\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"buy\" data-testid=\"tab-buy\">\n            <ShoppingCart className=\"h-4 w-4 mr-2\" />\n            Buy Items\n          </TabsTrigger>\n          <TabsTrigger value=\"sell\" data-testid=\"tab-sell\">\n            <Coins className=\"h-4 w-4 mr-2\" />\n            Sell Resources\n          </TabsTrigger>\n          <TabsTrigger value=\"craft\" data-testid=\"tab-craft\">\n            <Wrench className=\"h-4 w-4 mr-2\" />\n            Crafting\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Buy Items Tab */}\n        <TabsContent value=\"buy\" className=\"space-y-6\">\n          <Card className=\"glow-border\">\n            <CardHeader>\n              <CardTitle className=\"text-primary\">\n                <Store className=\"h-5 w-5 inline mr-2\" />\n                Market Items\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {marketLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading market data...</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {marketItems.map((item: any, index: number) => (\n                    <Card key={index} className=\"border hover:border-primary/50 transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-semibold text-foreground\" data-testid={`text-item-name-${index}`}>\n                            {item.name}\n                          </h4>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {item.rarity}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          {item.description}\n                        </p>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"text-sm\">\n                            <span className=\"text-muted-foreground\">Price:</span>\n                            <span className=\"font-mono ml-1 text-accent font-bold\" data-testid={`text-item-price-${index}`}>\n                              {item.price.toLocaleString()} ₡\n                            </span>\n                          </div>\n                          <div className=\"text-sm\">\n                            <span className=\"text-muted-foreground\">Stock:</span>\n                            <span className=\"font-mono ml-1 text-foreground\" data-testid={`text-item-stock-${index}`}>\n                              {item.availability}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            max={item.availability}\n                            value={buyQuantity}\n                            onChange={(e) => setBuyQuantity(parseInt(e.target.value) || 1)}\n                            className=\"w-20\"\n                            data-testid={`input-buy-quantity-${index}`}\n                          />\n                          <Button\n                            size=\"sm\"\n                            disabled={!user || item.availability === 0 || buyItemMutation.isPending}\n                            onClick={() => handleBuyItem(item.name)}\n                            data-testid={`button-buy-${index}`}\n                          >\n                            Buy\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Sell Resources Tab */}\n        <TabsContent value=\"sell\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-primary\">Sell Resources</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"resource-select\">Select Resource</Label>\n                  <Select value={selectedResource} onValueChange={setSelectedResource}>\n                    <SelectTrigger data-testid=\"select-resource-to-sell\">\n                      <SelectValue placeholder=\"Choose a resource to sell\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {resources.map((resource: any) => (\n                        <SelectItem key={resource.id} value={resource.id}>\n                          {resource.name} (x{resource.quantity})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"sell-quantity\">Quantity</Label>\n                    <Input\n                      id=\"sell-quantity\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={sellQuantity}\n                      onChange={(e) => setSellQuantity(parseInt(e.target.value) || 1)}\n                      data-testid=\"input-sell-quantity\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"sell-price\">Price per Unit</Label>\n                    <Input\n                      id=\"sell-price\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={sellPrice}\n                      onChange={(e) => setSellPrice(parseInt(e.target.value) || 0)}\n                      data-testid=\"input-sell-price\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <div className=\"text-sm\">\n                    <span className=\"text-muted-foreground\">Total Income:</span>\n                    <span className=\"font-mono ml-1 text-accent font-bold\">\n                      {(sellQuantity * sellPrice).toLocaleString()} ₡\n                    </span>\n                  </div>\n                </div>\n\n                <Button\n                  className=\"w-full\"\n                  disabled={!selectedResource || sellQuantity <= 0 || sellPrice <= 0 || sellResourceMutation.isPending}\n                  onClick={handleSellResource}\n                  data-testid=\"button-sell-resource\"\n                >\n                  <Coins className=\"h-4 w-4 mr-2\" />\n                  List for Sale\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-primary\">Your Resources</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  {resources.length > 0 ? (\n                    resources.map((resource: any, index: number) => (\n                      <div key={resource.id} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                        <div>\n                          <div className=\"font-medium text-foreground\" data-testid={`text-resource-name-${index}`}>\n                            {resource.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {resource.rarity} • {resource.type}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-mono text-foreground\" data-testid={`text-resource-quantity-${index}`}>\n                            x{resource.quantity}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            ~{resource.value} ₡ each\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                      <p className=\"text-muted-foreground\">No resources to sell</p>\n                      <p className=\"text-sm text-muted-foreground\">Explore space to gather materials</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Crafting Tab */}\n        <TabsContent value=\"craft\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">\n                <Wrench className=\"h-5 w-5 inline mr-2\" />\n                Available Recipes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {recipes.length > 0 ? (\n                  recipes.map((recipe: any, index: number) => (\n                    <Card key={recipe.id} className=\"border hover:border-primary/50 transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-semibold text-foreground\" data-testid={`text-recipe-name-${index}`}>\n                            {recipe.name}\n                          </h4>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {recipe.rarity}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          {recipe.description}\n                        </p>\n                        \n                        <div className=\"space-y-2 mb-3\">\n                          <h5 className=\"text-xs font-medium text-muted-foreground\">Materials Required:</h5>\n                          {recipe.materials?.map((material: any, matIndex: number) => (\n                            <div key={matIndex} className=\"text-xs flex justify-between\">\n                              <span>{material.name}</span>\n                              <span className=\"font-mono\">x{material.quantity}</span>\n                            </div>\n                          ))}\n                        </div>\n\n                        <Button\n                          size=\"sm\"\n                          className=\"w-full\"\n                          disabled={craftItemMutation.isPending}\n                          onClick={() => craftItemMutation.mutate(recipe.id)}\n                          data-testid={`button-craft-${index}`}\n                        >\n                          Craft Item\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"col-span-full text-center py-8\">\n                    <Wrench className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">No recipes available</p>\n                    <p className=\"text-sm text-muted-foreground\">Discover recipes through exploration</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":16982},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}